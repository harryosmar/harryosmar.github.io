3:I[6702,[],""]
5:I[8097,[],""]
6:I[4865,["513","static/chunks/513-54c786173a9c666c.js","122","static/chunks/122-1e2541ae7fd00b15.js","948","static/chunks/app/(content)/layout-e928e60977542457.js"],"NavTabs"]
7:I[4387,["185","static/chunks/app/layout-599a8f016f6ff6df.js"],"ThemeProvider"]
4:["page","1","d"]
8:{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"}
9:{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"}
a:{"display":"inline-block"}
b:{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0}
0:["Mui_tdjiU71vdLHCh2glj",[[["",{"children":["(content)",{"children":["articles",{"children":["page",{"children":[["page","1","d"],{"children":["__PAGE__?{\"page\":\"1\"}",{}]}]}]}]}]},"$undefined","$undefined",true],["",{"children":["(content)",{"children":["articles",{"children":["page",{"children":[["page","1","d"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(content)","children","articles","children","page","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(content)","children","articles","children","page","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(content)","children","articles","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[null,["$","div",null,{"className":"min-h-screen bg-white dark:bg-neutral-900","children":[["$","$L6",null,{}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(content)","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]]}]],null],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/7b555c975a649a76.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":["$","body",null,{"className":"__variable_1e4310 __variable_c3aa02 min-h-screen font-sans antialiased bg-background text-foreground dark:bg-neutral-900 dark:text-neutral-100 transition-colors","children":["$","$L7",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":"$8","children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":"$9","children":"404"}],["$","div",null,{"style":"$a","children":["$","h2",null,{"style":"$b","children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]}]}]}]],null],null],["$Lc",null]]]]
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Articles"}],["$","meta","3",{"name":"description","content":"Thoughts, tutorials, and insights about web development, software engineering, and technology."}],["$","meta","4",{"name":"robots","content":"index, follow"}],["$","meta","5",{"property":"og:title","content":"Articles"}],["$","meta","6",{"property":"og:description","content":"Thoughts, tutorials, and insights about web development, software engineering, and technology."}],["$","meta","7",{"property":"og:url","content":"https://www.harryosmarsitohang.com/articles/page/1"}],["$","meta","8",{"property":"og:type","content":"website"}],["$","meta","9",{"name":"twitter:card","content":"summary"}],["$","meta","10",{"name":"twitter:title","content":"Articles"}],["$","meta","11",{"name":"twitter:description","content":"Thoughts, tutorials, and insights about web development, software engineering, and technology."}],["$","link","12",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","13",{"name":"next-size-adjust"}]]
1:null
d:I[6243,["513","static/chunks/513-54c786173a9c666c.js","189","static/chunks/189-76139bfb22cdcfc2.js","829","static/chunks/app/(content)/articles/page/%5Bpage%5D/page-803fb91c4fead796.js"],"LastVisitedPageHandler"]
e:I[4315,["513","static/chunks/513-54c786173a9c666c.js","189","static/chunks/189-76139bfb22cdcfc2.js","829","static/chunks/app/(content)/articles/page/%5Bpage%5D/page-803fb91c4fead796.js"],"default"]
14:I[6676,["513","static/chunks/513-54c786173a9c666c.js","189","static/chunks/189-76139bfb22cdcfc2.js","829","static/chunks/app/(content)/articles/page/%5Bpage%5D/page-803fb91c4fead796.js"],"Pagination"]
f:T14b1,<blockquote>
<p>Forget boring docs! Let‚Äôs learn Docker and CI/CD as if we‚Äôre in a kitchen full of magical chefs, robot butlers, and delicious automation. (Still want the real techy stuff? <a href="https://www.docker.com/">Head to Docker's official site</a>.)</p>
</blockquote>
<h2 id="-page-1-docker--your-magic-kitchen-in-a-box">üöÄ Page 1: Docker ‚Äî Your Magic Kitchen in a Box<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-page-1-docker--your-magic-kitchen-in-a-box" class="anchor" aria-hidden="true">#</a></span></h2>
<hr>
<p><strong>Panel 1: Chaos in the Kitchen</strong></p>
<p><em>Messy kitchen, chefs yelling, food burning.</em></p>
<p>Text: ‚ÄúChef Dino‚Äôs kitchen was a mess whenever a new chef joined.‚Äù</p>
<hr>
<p><strong>Panel 2: ‚ÄúIt works on my stove!‚Äù</strong></p>
<p><em>A confused chef serves a questionable dish.</em></p>
<p>Dino sighs.</p>
<p>Text: ‚ÄúEvery chef‚Äôs setup was different. The recipes? Unpredictable.‚Äù</p>
<hr>
<p><strong>Panel 3: Enter the Wizard: Docker!</strong></p>
<p><em>A wizard appears with a glowing box labeled ‚ÄòDocker‚Äô.</em></p>
<p>Wizard: ‚ÄúInside this box: your stove, your tools, your recipe ‚Äî all ready to go!‚Äù</p>
<hr>
<p><strong>Panel 4: Cloning the Container</strong></p>
<p><em>Dino clones the Docker box and ships it to chefs around the world.</em></p>
<p>Text: ‚ÄúNow, every chef makes the same dish, every time, everywhere!‚Äù</p>
<hr>
<img src="/images/mermaid/mermaid-9ef9322b7712741905d1acc07586d5f7.svg" alt="Mermaid diagram">
<h2 id="page-2-cicd--the-devops-butler">Page 2: CI/CD ‚Äî The DevOps Butler<span class="ml-2 opacity-0 hover:opacity-100"><a href="#page-2-cicd--the-devops-butler" class="anchor" aria-hidden="true">#</a></span></h2>
<hr>
<p><strong>Panel 1: Dino Still Tired</strong></p>
<p><em>Dino checks a long to-do list, manually taste-tests dishes.</em></p>
<p>Text: ‚ÄúEven with Docker, Dino had to test and deliver every dish by hand.‚Äù</p>
<hr>
<p><strong>Panel 2: Meet Jenkins! - the CI/CD robot butler</strong></p>
<p><em>A classy robot butler rolls in with gears and a clipboard.</em></p>
<p>Jenkins: ‚ÄúSir, I‚Äôll automate your entire kitchen!‚Äù</p>
<hr>
<p><strong>Panel 3: CI/CD Conveyor Belt Magic</strong></p>
<p><em>Jenkins oversees a conveyor belt with four fun steps:</em></p>
<p>Jenkins: ‚ÄúSir, I‚Äôll automate your entire kitchen!‚Äù</p>
<ul>
<li>üß™ Build ‚Äì Mix the ingredients</li>
<li>‚úÖ Test ‚Äì Taste test it</li>
<li>üì¶ Package ‚Äì Put it in a Docker box</li>
<li>üöÄ Deploy ‚Äì Serve it hot!</li>
</ul>
<hr>
<p><strong>Panel 4: Code Pushed = Auto Magic</strong></p>
<p><em>A Dev-Chef taps ‚ÄúPush‚Äù on GitHub. Jenkins jumps into action!</em></p>
<p>Jenkins springs into action along the belt.</p>
<p>Text: ‚ÄúEach new recipe triggers the pipeline automatically!‚Äù</p>
<hr>
<img src="/images/mermaid/mermaid-2dcc391f8b1831f1f03ab64d636ee836.svg" alt="Mermaid diagram">
<h2 id="page-3-cicd-success--kitchen-zen-achieved">Page 3: CI/CD Success ‚Äî Kitchen Zen Achieved<span class="ml-2 opacity-0 hover:opacity-100"><a href="#page-3-cicd-success--kitchen-zen-achieved" class="anchor" aria-hidden="true">#</a></span></h2>
<hr>
<p><strong>Panel 1: Smiles All Around</strong></p>
<p><em>Dino relaxes with tea. Jenkins bows. Customers devour perfect meals.</em></p>
<p>Text: ‚ÄúThanks to automation, every dish is a hit!‚Äù</p>
<hr>
<p><strong>Panel 2: What‚Äôs in  CI/CD Pipeline Summary Scroll?</strong></p>
<p><em>A scroll labeled ‚ÄúDevOps Spellbook‚Äù floats in the air.</em></p>
<ul>
<li>CI (Continuous Integration): Test every recipe change üß™</li>
<li>CD (Delivery): Ready to go at any moment üì¶</li>
<li>CD (Deployment): Serve it automatically! üöÄ</li>
</ul>
<hr>
<p><strong>Panel 3: Dino‚Äôs Quote of the Day</strong></p>
<p><em>Spotlight on Dino in a chef‚Äôs hat.</em></p>
<p>Dino: ‚ÄúWith Docker and Jenkins, my kitchen runs itself ‚Äî faster, safer, and tastier!‚Äù</p>
<p><strong>End Caption:</strong></p>
<p><em>ü¶ñ The DevOps Kitchen: Where every push becomes a perfect plate!</em></p>
<hr>
<h2 id="complete-flow">Complete Flow<span class="ml-2 opacity-0 hover:opacity-100"><a href="#complete-flow" class="anchor" aria-hidden="true">#</a></span></h2>
<img src="/images/mermaid/mermaid-c13b93678655026429e4dfbd8b9c3cfe.svg" alt="Mermaid diagram">
<h2 id="-further-reading-level-up-your-devops-skills">üìö Further Reading: Level Up Your DevOps Skills<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-further-reading-level-up-your-devops-skills" class="anchor" aria-hidden="true">#</a></span></h2>
<p>Want to go beyond the comic kitchen? Here are some awesome official resources to explore more:</p>
<p>üê≥ Docker ‚Äì What is a Container?
Learn how Docker works and why it's so powerful:
üëâ <a href="https://www.docker.com/resources/what-container/">https://www.docker.com/resources/what-container/</a></p>
<p>ü§ñ Jenkins ‚Äì Automation Superpowers
Dive into Jenkins docs and pipelines:
üëâ <a href="https://www.jenkins.io/doc/">https://www.jenkins.io/doc/</a></p>
<p>üîÅ CI/CD Explained ‚Äì From Code to Deployment
Atlassian‚Äôs beginner-friendly guide on Continuous Integration &#x26; Continuous Delivery:
üëâ <a href="https://www.atlassian.com/continuous-delivery">https://www.atlassian.com/continuous-delivery</a></p>10:T4543,<blockquote>
<p>Recommendation: Use zsh as your default shell for a smoother experience.</p>
</blockquote>
<h2 id="1-iterm2">1. Iterm2<span class="ml-2 opacity-0 hover:opacity-100"><a href="#1-iterm2" class="anchor" aria-hidden="true">#</a></span></h2>
<blockquote>
<p>Replace your default terminal with iTerm2‚Äîa modern terminal with advanced features.</p>
</blockquote>
<p><a href="https://iterm2.com/index.html">Download iTerm2</a></p>
<p>Settings Update</p>
<p>Enable natural text editing:</p>
<pre><code>Settings > Profiles > Keys > Key Mappings > Presets... > Natural Text Editing
</code></pre>
<h2 id="2-homebrew">2. Homebrew<span class="ml-2 opacity-0 hover:opacity-100"><a href="#2-homebrew" class="anchor" aria-hidden="true">#</a></span></h2>
<p>Homebrew is a package manager for macOS that simplifies installing software and libraries.</p>
<ul>
<li><a href="https://brew.sh/">Visit Homebrew Website</a></li>
</ul>
<p>Install Homebrew by running:</p>
<pre><code class="hljs language-bash">/bin/bash -c <span class="hljs-string">"<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>"</span>
</code></pre>
<h3 id="3-git">3. Git<span class="ml-2 opacity-0 hover:opacity-100"><a href="#3-git" class="anchor" aria-hidden="true">#</a></span></h3>
<p>Git is essential for version control in software development.</p>
<p>Install Git using Homebrew:</p>
<pre><code class="hljs language-bash">brew install git
</code></pre>
<h4 id="31-ssh-key">3.1 ssh key</h4>
<p>Set up SSH keys for secure access to Git repositories.</p>
<ul>
<li><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">Guide: Generating and Adding SSH Keys</a></li>
</ul>
<pre><code class="hljs language-bash"><span class="hljs-comment"># Generate a new SSH key:</span>
ssh-keygen -t ed25519 -C <span class="hljs-string">"your_email@example.com"</span>

<span class="hljs-comment"># Check your keys:</span>
<span class="hljs-built_in">ls</span> ~/.ssh
</code></pre>
<p>Copy the public key:</p>
<pre><code class="hljs language-bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_ed25519.pub
</code></pre>
<p>Add it to your GitHub account <a href="https://github.com/settings/ssh/new">here</a>.</p>
<h4 id="32-gitconfig">3.2 .gitconfig</h4>
<p>Update your <code>~/.gitconfig</code> file:</p>
<pre><code>[url "git@gitlab.com:"]
	insteadOf = https://gitlab.com/
[url "git@github.com:"]
	insteadOf = https://github.com/
[user]
	name = Your Name
	email = your_email@example.com
</code></pre>
<h2 id="4-oh-my-zsh">4. oh-my-zsh<span class="ml-2 opacity-0 hover:opacity-100"><a href="#4-oh-my-zsh" class="anchor" aria-hidden="true">#</a></span></h2>
<blockquote>
<p>Supercharge your shell with Oh My Zsh!</p>
</blockquote>
<p>Oh My Zsh provides themes and plugins to enhance your terminal experience.</p>
<ul>
<li><a href="https://ohmyz.sh/">Visit Oh My Zsh</a></li>
</ul>
<p>Install it with:</p>
<pre><code class="hljs language-bash">sh -c <span class="hljs-string">"<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>"</span>
</code></pre>
<h2 id="5-asdf">5. asdf<span class="ml-2 opacity-0 hover:opacity-100"><a href="#5-asdf" class="anchor" aria-hidden="true">#</a></span></h2>
<blockquote>
<p>Manage multiple runtime versions with asdf.</p>
</blockquote>
<p>asdf simplifies managing different versions of programming languages and tools.</p>
<ul>
<li><a href="https://asdf-vm.com/">Visit asdf</a></li>
</ul>
<p>Recommend using the official git method</p>
<p>Install asdf:</p>
<pre><code class="hljs language-bash">git <span class="hljs-built_in">clone</span> https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.15.0
</code></pre>
<p>Add this to <code>~/.zshrc</code>:</p>
<pre><code>. "$HOME/.asdf/asdf.sh"
</code></pre>
<h3 id="6-nodejs">6. nodejs<span class="ml-2 opacity-0 hover:opacity-100"><a href="#6-nodejs" class="anchor" aria-hidden="true">#</a></span></h3>
<p>Install Node.js using asdf:</p>
<pre><code class="hljs language-bash"><span class="hljs-comment"># install plugin nodejs</span>
asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git

<span class="hljs-comment"># list installed plugin</span>
asdf plugin list

<span class="hljs-comment"># Install a Version</span>
asdf install nodejs nodejs

<span class="hljs-comment"># Set a Version</span>
asdf global nodejs nodejs

<span class="hljs-comment"># check current nodejs version</span>
node -v
</code></pre>
<p>Install global npm packages</p>
<pre><code class="hljs language-bash">npm install -g yarn pnpm
</code></pre>
<p>Add this to <code>~/.zshrc</code>:</p>
<pre><code>export NODE_PATH=$(npm root -g)
</code></pre>
<h2 id="7-pyenv">7. Pyenv<span class="ml-2 opacity-0 hover:opacity-100"><a href="#7-pyenv" class="anchor" aria-hidden="true">#</a></span></h2>
<blockquote>
<p>Manage Python versions seamlessly.</p>
</blockquote>
<p>Pyenv helps you install and switch between Python versions easily.</p>
<ul>
<li><a href="https://github.com/pyenv/pyenv">Visit Pyenv</a></li>
</ul>
<p>Install Pyenv:</p>
<pre><code class="hljs language-bash"><span class="hljs-comment"># Update homebrew and install pyenv</span>
brew update
brew install pyenv
</code></pre>
<p>Update your shell environment:</p>
<pre><code class="hljs language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">'export PYENV_ROOT="$HOME/.pyenv"'</span> >> ~/.zshrc
<span class="hljs-built_in">echo</span> <span class="hljs-string">'[[ -d $PYENV_ROOT/bin ]] &#x26;&#x26; export PATH="$PYENV_ROOT/bin:$PATH"'</span> >> ~/.zshrc
<span class="hljs-built_in">echo</span> <span class="hljs-string">'eval "$(pyenv init - zsh)"'</span> >> ~/.zshrc
<span class="hljs-built_in">source</span> ~/.zshrc
</code></pre>
<p>Install Python:</p>
<pre><code class="hljs language-bash">pyenv install 3.10.4
pyenv global 3.10.4
</code></pre>
<h3 id="71-venv">7.1 venv<span class="ml-2 opacity-0 hover:opacity-100"><a href="#71-venv" class="anchor" aria-hidden="true">#</a></span></h3>
<blockquote>
<p>A Python virtual environment (venv)</p>
</blockquote>
<p>Create and activate a virtual environment to isolate dependencies:</p>
<ul>
<li><a href="https://docs.python.org/3/library/venv.html">https://docs.python.org/3/library/venv.html</a></li>
</ul>
<pre><code class="hljs language-bash"><span class="hljs-built_in">mkdir</span> demo-python &#x26;&#x26; <span class="hljs-built_in">cd</span>  demo-pyton
python -m venv myvenv
<span class="hljs-built_in">source</span>  myvenv/bin/activate
</code></pre>
<p><code>pip</code> usage in venv, eg: install <code>Flask</code></p>
<pre><code class="hljs language-bash"><span class="hljs-comment"># install Flask api framework</span>
pip install Flask
</code></pre>
<p>Create file <code>hello.py</code> inside <code>/demo-python</code> directory</p>
<pre><code class="hljs language-python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask

app = Flask(__name__)

<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">"/"</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():
    <span class="hljs-keyword">return</span> <span class="hljs-string">"&#x3C;p>Hello, World!&#x3C;/p>"</span>
</code></pre>
<p>Serving Flask app <code>hello.py</code></p>
<pre><code class="hljs language-bash">flask --app hello run
</code></pre>
<p>Create file <code>requirements.txt</code></p>
<pre><code class="hljs language-bash">pip freeze > requirements.txt
</code></pre>
<h2 id="8java">8.Java<span class="ml-2 opacity-0 hover:opacity-100"><a href="#8java" class="anchor" aria-hidden="true">#</a></span></h2>
<p>Java is essential for backend services and enterprise applications.</p>
<p>Download and install your preferred version, <em>Choose <code>macOS</code> > ARM64 DMG Installer</em>:</p>
<ul>
<li><a href="https://www.oracle.com/id/java/technologies/downloads/#java23">java 23</a></li>
<li><a href="https://www.oracle.com/id/java/technologies/downloads/#java11">java 11</a></li>
</ul>
<p>Update your <code>~/.zshrc</code></p>
<pre><code>#export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-23.jdk/Contents/Home
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-11.jdk/Contents/Home
export PATH=$JAVA_HOME/bin:$PATH
</code></pre>
<p>Reload and verify:</p>
<pre><code class="hljs language-bash"><span class="hljs-built_in">source</span> ~/.zshrc
java --version
</code></pre>
<h2 id="9go">9.Go<span class="ml-2 opacity-0 hover:opacity-100"><a href="#9go" class="anchor" aria-hidden="true">#</a></span></h2>
<p>Go is a fast and efficient language widely used for backend development.</p>
<ul>
<li><a href="https://go.dev/dl/">Download Go</a></li>
</ul>
<p>Configure Go environment, edit <code>~/.zshrc</code>, add content below:</p>
<pre><code># Go private packages
export GOPRIVATE=github.com/Your-Repo
# Go Path
export GOPATH="$HOME/go"
# Go Root Versions
#export GOROOT="$HOME/sdk/go1.23.4"
#export GOROOT="$HOME/sdk/go1.23.0"
export GOROOT="$HOME/sdk/go1.22.10"
export GOBIN="$GOROOT/bin"
export PATH=$GOBIN:$PATH
</code></pre>
<p>don't forget to install <code>golang/mock/mockgen</code></p>
<pre><code>go install github.com/golang/mock/mockgen@latest

# you should see mockgen executable in $GOBIN
ls $GOBIN 
</code></pre>
<p>Reload and verify:</p>
<pre><code class="hljs language-bash"><span class="hljs-built_in">source</span> ~/.zshrc
go <span class="hljs-built_in">env</span>
go version
</code></pre>
<p>Your code should stored in <code>$GOPATH/src</code>. Go mod package will be stored in <code>$GOPATH/pkg</code>.</p>
<h2 id="10kube">10.Kube<span class="ml-2 opacity-0 hover:opacity-100"><a href="#10kube" class="anchor" aria-hidden="true">#</a></span></h2>
<p>Kubernetes is essential for managing containerized applications.</p>
<h3 id="101-kubeconfig">10.1 .kube/config<span class="ml-2 opacity-0 hover:opacity-100"><a href="#101-kubeconfig" class="anchor" aria-hidden="true">#</a></span></h3>
<p>First create your <code>~/.kube/config</code> file with format :</p>
<pre><code class="hljs language-yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span>
<span class="hljs-attr">clusters:</span>
<span class="hljs-bullet">-</span> <span class="hljs-attr">cluster:</span>
    <span class="hljs-attr">certificate-authority-data:</span> <span class="hljs-string">CERT-DATA</span>
    <span class="hljs-attr">server:</span> <span class="hljs-string">https://host1:port</span>
  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster1</span>
<span class="hljs-bullet">-</span> <span class="hljs-attr">cluster:</span>
    <span class="hljs-attr">certificate-authority-data:</span> <span class="hljs-string">CERT-DATA</span>
    <span class="hljs-attr">server:</span> <span class="hljs-string">https://host2:port</span>
  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster2</span>
<span class="hljs-bullet">-</span> <span class="hljs-attr">cluster:</span>
    <span class="hljs-attr">certificate-authority-data:</span> <span class="hljs-string">CERT-DATA</span>
    <span class="hljs-attr">server:</span> <span class="hljs-string">https://host3:port</span>
  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster3</span>
<span class="hljs-attr">contexts:</span>
<span class="hljs-bullet">-</span> <span class="hljs-attr">context:</span>
    <span class="hljs-attr">cluster:</span> <span class="hljs-string">cluster1</span>
    <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span>
    <span class="hljs-attr">user:</span> <span class="hljs-string">me-cluster1-user</span>
  <span class="hljs-attr">name:</span> <span class="hljs-string">me-cluster1-ctx</span>
<span class="hljs-bullet">-</span> <span class="hljs-attr">context:</span>
    <span class="hljs-attr">cluster:</span> <span class="hljs-string">cluster2</span>
    <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span>
    <span class="hljs-attr">user:</span> <span class="hljs-string">me-cluster2-user</span>
  <span class="hljs-attr">name:</span> <span class="hljs-string">me-cluster2-ctx</span>
<span class="hljs-bullet">-</span> <span class="hljs-attr">context:</span>
    <span class="hljs-attr">cluster:</span> <span class="hljs-string">cluster3</span>
    <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span>
    <span class="hljs-attr">user:</span> <span class="hljs-string">me-cluster3-user</span>
  <span class="hljs-attr">name:</span> <span class="hljs-string">me-cluster3-ctx</span>
<span class="hljs-attr">current-context:</span> <span class="hljs-string">me-cluster1-ctx</span>
<span class="hljs-attr">kind:</span> <span class="hljs-string">Config</span>
<span class="hljs-attr">preferences:</span> {}
<span class="hljs-attr">users:</span>
<span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">me-cluster1-user</span>
  <span class="hljs-attr">user:</span>
    <span class="hljs-attr">client-certificate-data:</span> <span class="hljs-string">CERT-DATA</span>
    <span class="hljs-attr">client-key-data:</span> <span class="hljs-string">KEY-DATA</span>
<span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">me-cluster2-user</span>
  <span class="hljs-attr">user:</span>
    <span class="hljs-attr">client-certificate-data:</span> <span class="hljs-string">CERT-DATA</span>
    <span class="hljs-attr">client-key-data:</span> <span class="hljs-string">KEY-DATA</span>
<span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">me-cluster3-user</span>
  <span class="hljs-attr">user:</span>
    <span class="hljs-attr">client-certificate-data:</span> <span class="hljs-string">CERT-DATA</span>
    <span class="hljs-attr">client-key-data:</span> <span class="hljs-string">KEY-DATA</span>
</code></pre>
<h3 id="102-kubectl">10.2 kubectl<span class="ml-2 opacity-0 hover:opacity-100"><a href="#102-kubectl" class="anchor" aria-hidden="true">#</a></span></h3>
<p><a href="https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/">kubectl</a></p>
<p>Download and set up kubectl:</p>
<pre><code class="hljs language-bash"><span class="hljs-comment"># Download the latest release</span>
curl -LO <span class="hljs-string">"https://dl.k8s.io/release/<span class="hljs-subst">$(curl -L -s https://dl.k8s.io/release/stable.txt)</span>/bin/darwin/arm64/kubectl"</span>

<span class="hljs-comment"># Validate the binary (optional)</span>
curl -LO <span class="hljs-string">"https://dl.k8s.io/release/<span class="hljs-subst">$(curl -L -s https://dl.k8s.io/release/stable.txt)</span>/bin/darwin/arm64/kubectl.sha256"</span>

<span class="hljs-comment"># Make the kubectl binary executable.</span>
<span class="hljs-built_in">chmod</span> +x ./kubectl

<span class="hljs-comment"># create /usr/local/bin if not exist</span>
<span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /usr/local/bin

<span class="hljs-comment"># Move the kubectl binary to a file location on your system PATH.</span>
<span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mv</span> ./kubectl /usr/local/bin/kubectl
<span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> root: /usr/local/bin/kubectl

<span class="hljs-comment"># Test to ensure the version you installed is up-to-date</span>
kubectl version --client
</code></pre>
<h3 id="103-zsh-kubectl-prompt">10.3 zsh-kubectl-prompt<span class="ml-2 opacity-0 hover:opacity-100"><a href="#103-zsh-kubectl-prompt" class="anchor" aria-hidden="true">#</a></span></h3>
<p>Enhance your shell prompt with cluster info :</p>
<ul>
<li><a href="https://github.com/superbrothers/zsh-kubectl-prompt">zsh-kubectl-prompt</a></li>
</ul>
<pre><code class="hljs language-bash"><span class="hljs-built_in">cd</span> ~
git <span class="hljs-built_in">clone</span> git@github.com:superbrothers/zsh-kubectl-prompt
</code></pre>
<p>Update <code>~/.zshrc</code></p>
<pre><code># kubeinfo
autoload -U colors; colors
source ~/zsh-kubectl-prompt/kubectl.zsh
RPROMPT='%{$fg[green]%}($ZSH_KUBECTL_PROMPT)%{$reset_color%}'
alias k='kubectl'
alias ksn='_f(){k get namespace $1 > /dev/null; if [ $? -eq 1 ]; then return $?; fi;  k config set-context $(k config current-context) --namespace=$1; echo "Namespace: $1"};_f'
alias ksc='_f(){k config get-contexts $1 > /dev/null; if [ $? -eq 1 ]; then return $?; fi;  k config use-context $1; echo "Context: $1"};_f'
#Usage:
#‚ûú  ~ ksn dev1                                                       (dev-context/dev1)
#     Context "dev-context" modified.
#     Namespace: dev1

#‚ûú  ~ ksn ff                                                         (dev-context/dev1)
#     Error from server (NotFound): namespaces "ff" not found
[[ /usr/local/bin/kubectl ]] &#x26;&#x26; source &#x3C;(kubectl completion zsh)
</code></pre>
<h4 id="1031-switch-namespace">10.3.1 Switch namespace</h4>
<p>Change namespace in current kube context<code>me-cluster1-ctx</code> namespace <code>default</code> to namespace <code>staging</code></p>
<pre><code class="hljs language-bash">ksn staging
</code></pre>
<h4 id="1032-switch-context">10.3.2 Switch context</h4>
<p>Change namespace in current kube context<code>me-cluster1-ctx</code> to context <code>me-cluster2-ctx</code></p>
<pre><code class="hljs language-bash">ksc me-cluster2-ctx
</code></pre>
<blockquote>
<p>That‚Äôs it! With these steps, your MacBook is primed for full-stack development. üéâ</p>
</blockquote>11:T74c,<p>In a project, when proper analysis is <del>overlooked</del>, <strong>chaos</strong> often follows:</p>
<ul>
<li>Developers <strong>struggle</strong> <del>without clear requirements.</del></li>
<li>Teams face <strong>delays</strong>, rework, and frustration.</li>
<li>Management becomes dissatisfied <del>when expectations aren‚Äôt met</del>.</li>
</ul>
<p>As someone who has worked as a Business Analyst, I truly appreciate the value this role brings to a project. Proper analysis isn‚Äôt just about gathering requirements‚Äîit‚Äôs about <strong>asking the right questions</strong>, guiding stakeholders, and <strong>ensuring alignment</strong> among everyone involved.</p>
<p>In my experience, three key steps make all the difference:</p>
<p>‚úÖ Ask stakeholders <strong>detailed</strong> questions. Taking the time to dig deeper helps uncover the real needs behind their requests. Often, the true requirements only emerge through targeted and specific inquiries.</p>
<p>‚úÖ Guide stakeholders through the process. Stakeholders may overlook critical details or fail to recognize what‚Äôs necessary. Helping them <strong>clarify</strong> and refine their needs is one of the most rewarding parts of the role.</p>
<p>‚úÖ Validate and confirm the gathered information. <strong>Reviewing and aligning</strong> the understanding of requirements with both stakeholders and the team prevents costly assumptions and misunderstandings.</p>
<p>These steps, though time-consuming, set the foundation for a successful project. Reflecting on my time as a Business Analyst, I found immense satisfaction in solving complex problems, bridging gaps between teams, and contributing to outcomes everyone could be proud of.</p>
<p>Business Analysis taught me the importance of <strong>clarity and communication</strong>, and these lessons have stayed with me throughout my career.</p>12:T6680,<h2 id="-ollama-introduction">ü¶ô Ollama introduction<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-ollama-introduction" class="anchor" aria-hidden="true">#</a></span></h2>
<p><a href="https://ollama.com/">Ollama</a> is a powerful platform designed to make it easy for developers <strong>to run large language models (LLMs) directly on their local computers</strong>, without needing a <del>big server</del> or expensive hardware like <del>high-end GPUs</del>.</p>
<p>With <a href="https://ollama.com/">Ollama</a>, you can get up and running with models such as <code>Llama 3.3</code>, <code>Phi 3</code>, <code>Mistral</code>, <code>Gemma 2</code>, and more, all <del>without the need for specialized cloud infrastructure</del>.</p>
<p>In short, <a href="https://ollama.com/">Ollama</a> democratizes access to cutting-edge <code>AI models</code>, making them <strong>accessible on personal computers</strong> and empowering developers to build AI solutions without the burden of <del>expensive server infrastructure</del>.</p>
<h2 id="-why-use-json-schema-constraints-in-ollama">üîë Why Use JSON Schema Constraints in Ollama?<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-why-use-json-schema-constraints-in-ollama" class="anchor" aria-hidden="true">#</a></span></h2>
<p><a href="https://ollama.com/">Ollama</a> now supports to constrain the output to a json
schema. <a href="https://ollama.com/blog/structured-outputs">https://ollama.com/blog/structured-outputs</a></p>
<p>Use cases for structured outputs include:</p>
<ul>
<li>Parsing data from documents</li>
<li>Extracting data from images</li>
<li>Structuring all language model responses</li>
<li>More reliability and consistency than JSON mode</li>
</ul>
<h2 id="-getting-started">üöÄ Getting Started<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-getting-started" class="anchor" aria-hidden="true">#</a></span></h2>
<h3 id="1-install-ollama">1. Install Ollama<span class="ml-2 opacity-0 hover:opacity-100"><a href="#1-install-ollama" class="anchor" aria-hidden="true">#</a></span></h3>
<p>Download <a href="https://ollama.com/">Ollama</a> from <a href="https://ollama.com/download">https://ollama.com/download</a>. Choose the appropriate version for your
platform and complete the installation.</p>
<h3 id="2-verify-installation">2. Verify Installation<span class="ml-2 opacity-0 hover:opacity-100"><a href="#2-verify-installation" class="anchor" aria-hidden="true">#</a></span></h3>
<p>After installation, confirm the version by running:</p>
<pre><code class="hljs language-shell">ollama --version
</code></pre>
<p>expected output format:</p>
<pre><code class="hljs language-shell">ollama version is 0.5.1
</code></pre>
<h3 id="3-start-ollama-server">3. Start Ollama Server<span class="ml-2 opacity-0 hover:opacity-100"><a href="#3-start-ollama-server" class="anchor" aria-hidden="true">#</a></span></h3>
<p>Run the following command to start the server:</p>
<pre><code class="hljs language-shell">ollama serve
</code></pre>
<p>By default, the server runs on port 11434. You can verify this by
visiting <a href="http://localhost:11434">http://localhost:11434</a>.</p>
<h3 id="4-download-the-ollama-model">4. Download the Ollama Model<span class="ml-2 opacity-0 hover:opacity-100"><a href="#4-download-the-ollama-model" class="anchor" aria-hidden="true">#</a></span></h3>
<p>I recommend the <code>llama3.2</code> model for its compact size (<code>2.0 GB</code>) and impressive performance.</p>
<p>It features <code>3 billion</code> parameters and <strong>outperforms</strong> many larger models in industry benchmarks.</p>
<p>Download the model with:</p>
<pre><code class="hljs language-shell">ollama run llama3.2
</code></pre>
<p>Verify the download:</p>
<pre><code class="hljs language-shell">ollama list
</code></pre>
<p>Expected output:</p>
<pre><code class="hljs language-shell">NAME                       ID              SIZE      MODIFIED        
llama3.2:latest            a80c4f17acd5    2.0 GB    n weeks ago
</code></pre>
<h2 id="Ô∏è-run-using-curl">‚ñ∂Ô∏è Run using CURL<span class="ml-2 opacity-0 hover:opacity-100"><a href="#Ô∏è-run-using-curl" class="anchor" aria-hidden="true">#</a></span></h2>
<p>Run using curl directly to <a href="https://ollama.com/">Ollama</a> server <a href="http://localhost:11434">http://localhost:11434</a>.</p>
<p>There is no need to code, there is no setup, no need to install anything (*make sure you have curl installed).</p>
<h3 id="use-case-1-extract-country-data">Use Case 1: Extract Country Data<span class="ml-2 opacity-0 hover:opacity-100"><a href="#use-case-1-extract-country-data" class="anchor" aria-hidden="true">#</a></span></h3>
<blockquote>
<p>Input Prompt: "Tell me about Canada."</p>
</blockquote>
<h4 id="schema">Schema</h4>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"object"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"properties"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"string"</span>
    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"capital"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"string"</span>
    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"languages"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"array"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"items"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"string"</span>
      <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"required"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-string">"name"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">"capital"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">"languages"</span>
  <span class="hljs-punctuation">]</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<h4 id="curl-request">Curl Request</h4>
<p>json schema above included in the request in field <code>format</code>.</p>
<p>Run the following command in the terminal:</p>
<pre><code class="hljs language-bash">curl --location <span class="hljs-string">'http://127.0.0.1:11434/api/chat'</span> \
--header <span class="hljs-string">'Content-Type: application/json'</span> \
--data <span class="hljs-string">'{
  "model": "llama3.2",
  "messages": [{"role": "user", "content": "Tell me about Canada."}],
  "stream": false,
  "format": {
    "type": "object",
    "properties": {
      "name": { "type": "string" },
      "capital": { "type": "string" },
      "languages": { "type": "array", "items": { "type": "string" } }
    },
    "required": ["name", "capital", "languages"]
  }
}'</span>
</code></pre>
<h4 id="response">Response</h4>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"model"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"llama3.2"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"created_at"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"2024-12-12T07:47:22.184905Z"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"message"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"role"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"assistant"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"content"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"{ \"capital\": \"Ottawa\", \"languages\": [\"English\", \"French\"], \"name\":\"Canada\" }"</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"done_reason"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"stop"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"done"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"total_duration"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1232600000</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"load_duration"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">33616458</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"prompt_eval_count"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">30</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"prompt_eval_duration"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">495000000</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"eval_count"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">29</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"eval_duration"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">700000000</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>see field <code>message.content</code> using the same json schema as above</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"capital"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Ottawa"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"languages"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-string">"English"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">"French"</span>
  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Canada"</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<h3 id="use-case-2-extract-pets-data">Use Case 2: Extract Pets Data<span class="ml-2 opacity-0 hover:opacity-100"><a href="#use-case-2-extract-pets-data" class="anchor" aria-hidden="true">#</a></span></h3>
<blockquote>
<p>Prompt: "I have two pets. A cat named Luna who is 5 years old and loves playing with yarn. She has grey fur. I also have a 2-year-old black cat named Loki who loves tennis balls."</p>
</blockquote>
<h4 id="schema-1">Schema</h4>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"$defs"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"Pet"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"properties"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">"age"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
          <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"integer"</span>
        <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"animal"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
          <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"string"</span>
        <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"color"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
          <span class="hljs-attr">"anyOf"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
            <span class="hljs-punctuation">{</span>
              <span class="hljs-attr">"const"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"black"</span>
            <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
            <span class="hljs-punctuation">{</span>
              <span class="hljs-attr">"const"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"grey"</span>
            <span class="hljs-punctuation">}</span>
          <span class="hljs-punctuation">]</span>
        <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"favorite_toy"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
          <span class="hljs-attr">"anyOf"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
            <span class="hljs-punctuation">{</span>
              <span class="hljs-attr">"const"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"yarn"</span>
            <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
            <span class="hljs-punctuation">{</span>
              <span class="hljs-attr">"const"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"tennis balls"</span>
            <span class="hljs-punctuation">}</span>
          <span class="hljs-punctuation">]</span>
        <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
          <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"string"</span>
        <span class="hljs-punctuation">}</span>
      <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"required"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
        <span class="hljs-string">"name"</span><span class="hljs-punctuation">,</span>
        <span class="hljs-string">"animal"</span><span class="hljs-punctuation">,</span>
        <span class="hljs-string">"age"</span><span class="hljs-punctuation">,</span>
        <span class="hljs-string">"color"</span><span class="hljs-punctuation">,</span>
        <span class="hljs-string">"favorite_toy"</span>
      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"object"</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"properties"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"pets"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"array"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"items"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">"$ref"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"#/$defs/Pet"</span>
      <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"required"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-string">"pets"</span>
  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"object"</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<h4 id="curl-request-1">Curl Request</h4>
<pre><code class="hljs language-bash">curl --location <span class="hljs-string">'http://127.0.0.1:11434/api/chat'</span> \
--header <span class="hljs-string">'Content-Type: application/json'</span> \
--data <span class="hljs-string">'{
  "model": "llama3.2",
  "messages": [{
    "role": "user",
    "content": "I have two pets. A cat named Luna who is 5 years old and loves playing with yarn. She has grey fur. I also have a 2-year-old black cat named Loki who loves tennis balls."
  }],
  "stream": false,
  "format": {
    "$defs": {
      "Pet": {
        "properties": {
          "age": { "type": "integer" },
          "animal": { "type": "string" },
          "color": { "anyOf": [
            { "const": "black" },
            { "const": "grey" }
          ] },
          "favorite_toy": { "anyOf": [
            { "const": "yarn" },
            { "const": "tennis balls" }
          ] },
          "name": { "type": "string" }
        },
        "required": ["name", "animal", "age", "color", "favorite_toy"],
        "type": "object"
      }
    },
    "properties": {
      "pets": {
        "type": "array",
        "items": { "$ref": "#/$defs/Pet" }
      }
    },
    "required": ["pets"],
    "type": "object"
  }
}'</span>
</code></pre>
<h4 id="response-1">Response</h4>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"model"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"llama3.2"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"created_at"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"2024-12-12T08:32:37.316804Z"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"message"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">"role"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"assistant"</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"content"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"{ \"pets\": [ { \"age\": 5, \"animal\": \"cat\", \"color\": \"grey\", \"favorite_toy\": \"yarn\" , \"name\": \"Luna\"}, { \"age\": 2, \"animal\": \"cat\", \"color\": \"black\", \"favorite_toy\": \"tennis balls\" , \"name\": \"Loki\"}] }"</span>
    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"done_reason"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"stop"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"done"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"total_duration"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">7159731958</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"load_duration"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">829545916</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"prompt_eval_count"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">68</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"prompt_eval_duration"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4620000000</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"eval_count"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">82</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"eval_duration"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1697000000</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>see field <code>message.content</code> using the same json schema as above</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"pets"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"age"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"animal"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"cat"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"color"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"grey"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"favorite_toy"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"yarn"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Luna"</span>
    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
    <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"age"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"animal"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"cat"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"color"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"black"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"favorite_toy"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"tennis balls"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Loki"</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">]</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<h2 id="Ô∏è-run-using-demo-python-api">‚ñ∂Ô∏è Run using demo python api<span class="ml-2 opacity-0 hover:opacity-100"><a href="#Ô∏è-run-using-demo-python-api" class="anchor" aria-hidden="true">#</a></span></h2>
<p>Recommend to use python 3.10.* with venv</p>
<h3 id="1-create-venv">1. Create venv<span class="ml-2 opacity-0 hover:opacity-100"><a href="#1-create-venv" class="anchor" aria-hidden="true">#</a></span></h3>
<p>Clone this repository</p>
<pre><code class="hljs language-shell">git clone https://github.com/harryosmar/ollama-demo-python.git
</code></pre>
<p>Run the following command in the terminal:</p>
<pre><code class="hljs language-shell">cd ollama-demo-python

python3 -m venv venv
</code></pre>
<h3 id="2-activate-venv">2. Activate venv<span class="ml-2 opacity-0 hover:opacity-100"><a href="#2-activate-venv" class="anchor" aria-hidden="true">#</a></span></h3>
<p>Run the following command in the terminal:</p>
<pre><code class="hljs language-shell">source ./venv/bin/activate
</code></pre>
<h3 id="3-install-requirements">3. Install requirements<span class="ml-2 opacity-0 hover:opacity-100"><a href="#3-install-requirements" class="anchor" aria-hidden="true">#</a></span></h3>
<p>Run the following command in the terminal:</p>
<pre><code class="hljs language-shell">pip install -r requirements.txt
</code></pre>
<ul>
<li><a href="https://flask.palletsprojects.com/en/2.3.x/">Flask</a> used as api framework</li>
<li><a href="https://pydantic-docs.helpmanual.io/">pydantic</a> used for data validation, create json schema from python class</li>
</ul>
<h3 id="4-run-app">4. Run app<span class="ml-2 opacity-0 hover:opacity-100"><a href="#4-run-app" class="anchor" aria-hidden="true">#</a></span></h3>
<p>Run the following command in the terminal:</p>
<pre><code class="hljs language-shell">flask --app main run
</code></pre>
<p>Start api server in <a href="http://127.0.0.1:5000">http://127.0.0.1:5000</a></p>
<h3 id="5-swagger-endpoints">5. Swagger endpoints<span class="ml-2 opacity-0 hover:opacity-100"><a href="#5-swagger-endpoints" class="anchor" aria-hidden="true">#</a></span></h3>
<p><a href="http://127.0.0.1:5000/apidocs/">swagger access link http://127.0.0.1:5000/apidocs/</a></p>
<h2 id="-conclusion">üî• Conclusion<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-conclusion" class="anchor" aria-hidden="true">#</a></span></h2>
<p>By leveraging JSON schema constraints, <a href="https://ollama.com/">Ollama</a> ensures structured, reliable, and predictable outputs from LLMs. Whether you‚Äôre parsing documents, analyzing images, or building robust APIs, this feature delivers the consistency and accuracy you need.</p>
<h2 id="-credits">üèÖ Credits<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-credits" class="anchor" aria-hidden="true">#</a></span></h2>
<p>Give credits to <strong>Matt Williams</strong> with his youtube channel <a href="https://www.youtube.com/@technovangelist">https://www.youtube.com/@technovangelist</a></p>
<p>He was part of the <strong>founding</strong> <a href="https://ollama.com/">Ollama</a> team. Don't forget to check out &#x26; subscribe to his channel, help him to reach 1 million subscribers.</p>
<p>I learned a lot from his videos, thank you Matt, hats off to you! üëè</p>13:T3f73,<p>Caching is an essential optimization technique in web development, helping <strong>reduce database load</strong> and significantly <strong>speeding up response times</strong>. If you‚Äôre building a Strapi-based application, adding a caching layer can make your API lightning-fast while maintaining scalability.</p>
<h2 id="requirements">Requirements<span class="ml-2 opacity-0 hover:opacity-100"><a href="#requirements" class="anchor" aria-hidden="true">#</a></span></h2>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"dependencies"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"@strapi/strapi"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"5.1.0"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"ioredis"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"^5.4.1"</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>

</code></pre>
<h2 id="-why-add-caching-in-strapi">üöÄ Why Add Caching in Strapi?<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-why-add-caching-in-strapi" class="anchor" aria-hidden="true">#</a></span></h2>
<p>Strapi provides a robust backend for APIs, but database queries can become a bottleneck as traffic grows. By adding caching to Strapi:</p>
<ul>
<li>Boost API <strong>response time</strong>: Serve cached data directly, avoiding repetitive database queries.</li>
<li><strong>Reduce</strong> backend load: Offload frequent reads to an in-memory store like Redis.</li>
<li>Enhance <strong>scalability</strong>: Handle higher traffic without straining your database.</li>
</ul>
<h2 id="flow">Flow<span class="ml-2 opacity-0 hover:opacity-100"><a href="#flow" class="anchor" aria-hidden="true">#</a></span></h2>
<h3 id="normal-flow">Normal flow<span class="ml-2 opacity-0 hover:opacity-100"><a href="#normal-flow" class="anchor" aria-hidden="true">#</a></span></h3>
<img src="/images/mermaid/mermaid-b87006366ef0ef03ba349357c7f73b87.svg" alt="Mermaid diagram">
<h3 id="clear_cache-flow">clear_cache Flow<span class="ml-2 opacity-0 hover:opacity-100"><a href="#clear_cache-flow" class="anchor" aria-hidden="true">#</a></span></h3>
<img src="/images/mermaid/mermaid-e3b912d91bb683f397b46239682fa223.svg" alt="Mermaid diagram">
<h2 id="-installing-redis-for-caching">üì¶ Installing Redis for Caching<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-installing-redis-for-caching" class="anchor" aria-hidden="true">#</a></span></h2>
<p>Install <code>ioredis</code> to interact with Redis, because we're using redis as cache provider.</p>
<pre><code class="hljs language-shell">npm install ioredis
</code></pre>
<h2 id="Ô∏è-setting-up-middleware-in-strapi">üõ†Ô∏è Setting Up Middleware in Strapi<span class="ml-2 opacity-0 hover:opacity-100"><a href="#Ô∏è-setting-up-middleware-in-strapi" class="anchor" aria-hidden="true">#</a></span></h2>
<p>To add a custom middleware, Strapi requires you to:</p>
<ol>
<li>Register it in the middleware configuration file (<code>./config/middlewares.ts</code>).</li>
<li>Create the middleware file in directory <code>./src/middlewares/</code>, then implement the middleware logic.</li>
</ol>
<h3 id="1-middleware-registration">1. Middleware Registration<span class="ml-2 opacity-0 hover:opacity-100"><a href="#1-middleware-registration" class="anchor" aria-hidden="true">#</a></span></h3>
<p>In <code>./config/middlewares.ts</code>, register your middleware as a global middleware:</p>
<p>register new <code>global::cache-middleware</code></p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [
  <span class="hljs-string">'strapi::logger'</span>,
  <span class="hljs-string">'strapi::errors'</span>,
  <span class="hljs-string">'strapi::security'</span>,
  <span class="hljs-string">'strapi::cors'</span>,
  <span class="hljs-string">'strapi::poweredBy'</span>,
  <span class="hljs-string">'strapi::query'</span>,
  <span class="hljs-string">'strapi::body'</span>,
  <span class="hljs-string">'strapi::session'</span>,
  <span class="hljs-string">'strapi::favicon'</span>,
  <span class="hljs-string">'strapi::public'</span>,
  <span class="hljs-string">'global::cache-middleware'</span> <span class="hljs-comment">// Register cache middleware here</span>
];
</code></pre>
<h3 id="2--create-the-cache-middleware-file">2. üß© Create the Cache Middleware file<span class="ml-2 opacity-0 hover:opacity-100"><a href="#2--create-the-cache-middleware-file" class="anchor" aria-hidden="true">#</a></span></h3>
<p>Create a new middleware file, <code>cache-middleware.ts</code>, in the <code>./src/middlewares/</code> directory</p>
<p>Full Implementation</p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Redis</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'ioredis'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> (config, { strapi }) => {
    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CACHE_TIMEOUT</span> = <span class="hljs-number">1000</span>; <span class="hljs-comment">// Connection timeout</span>
    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CACHE_EXPIRATION</span> = process.<span class="hljs-property">env</span>.<span class="hljs-property">REDIS_CACHE_EXPIRATION</span> || <span class="hljs-number">3600</span>; <span class="hljs-comment">// Default TTL: 1 hour</span>

    <span class="hljs-keyword">const</span> redis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Redis</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">REDIS_URL</span> || <span class="hljs-string">'redis://localhost:6379'</span>, {
        <span class="hljs-attr">connectTimeout</span>: <span class="hljs-variable constant_">CACHE_TIMEOUT</span>,
        <span class="hljs-attr">commandTimeout</span>: <span class="hljs-variable constant_">CACHE_TIMEOUT</span>,
        <span class="hljs-attr">retryStrategy</span>: <span class="hljs-function">(<span class="hljs-params">times</span>) =></span> (times &#x3C;= <span class="hljs-number">1</span> ? <span class="hljs-variable constant_">CACHE_TIMEOUT</span> : <span class="hljs-literal">null</span>)
    });

    redis.<span class="hljs-title function_">on</span>(<span class="hljs-string">'error'</span>, <span class="hljs-function">(<span class="hljs-params">error</span>) =></span> {
        strapi.<span class="hljs-property">log</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'Redis connection error:'</span>, error);
    });

    <span class="hljs-keyword">return</span> <span class="hljs-title function_">async</span> (ctx, next) => {
        <span class="hljs-keyword">const</span> start = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();
        <span class="hljs-keyword">const</span> matches = ctx.<span class="hljs-property">path</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/^\/?api(\/.+)$/</span>);

        <span class="hljs-comment">// Skip non-GET requests or non-API paths</span>
        <span class="hljs-keyword">if</span> (ctx.<span class="hljs-property">method</span> !== <span class="hljs-string">'GET'</span> || !matches || matches.<span class="hljs-property">length</span> !== <span class="hljs-number">2</span>) {
            <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();
            <span class="hljs-keyword">return</span>;
        }

        <span class="hljs-keyword">const</span> queryParams = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>(ctx.<span class="hljs-property">querystring</span>);
        <span class="hljs-keyword">const</span> shouldClearCache = queryParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">'clear_cache'</span>) === <span class="hljs-string">'1'</span>;
        queryParams.<span class="hljs-title function_">delete</span>(<span class="hljs-string">'clear_cache'</span>); <span class="hljs-comment">// Remove clear_cache from cache key</span>
        <span class="hljs-keyword">const</span> cacheKey = <span class="hljs-string">`strapi:cache:<span class="hljs-subst">${ctx.path}</span>?<span class="hljs-subst">${<span class="hljs-built_in">decodeURIComponent</span>(queryParams.toString())}</span>`</span>;

        <span class="hljs-keyword">const</span> <span class="hljs-title function_">tryRedisOperation</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">operation, retryCount = <span class="hljs-number">1</span></span>) => {
            <span class="hljs-keyword">try</span> {
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-title function_">operation</span>();
            } <span class="hljs-keyword">catch</span> (error) {
                <span class="hljs-keyword">if</span> (retryCount > <span class="hljs-number">0</span>) {
                    strapi.<span class="hljs-property">log</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">'Redis operation failed, retrying...'</span>);
                    <span class="hljs-keyword">return</span> <span class="hljs-title function_">tryRedisOperation</span>(operation, retryCount - <span class="hljs-number">1</span>);
                }
                <span class="hljs-keyword">throw</span> error;
            }
        };

        <span class="hljs-keyword">try</span> {
            <span class="hljs-keyword">if</span> (shouldClearCache) {
                <span class="hljs-keyword">await</span> <span class="hljs-title function_">tryRedisOperation</span>(<span class="hljs-function">() =></span> redis.<span class="hljs-title function_">del</span>(cacheKey));
                strapi.<span class="hljs-property">log</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">`Cache cleared for: <span class="hljs-subst">${cacheKey}</span>`</span>);
                ctx.<span class="hljs-title function_">set</span>(<span class="hljs-string">'X-Cache'</span>, <span class="hljs-string">'CLEARED'</span>);
            }

            <span class="hljs-keyword">const</span> cachedResponse = <span class="hljs-keyword">await</span> <span class="hljs-title function_">tryRedisOperation</span>(<span class="hljs-function">() =></span> redis.<span class="hljs-title function_">get</span>(cacheKey));
            <span class="hljs-keyword">if</span> (cachedResponse &#x26;&#x26; !shouldClearCache) {
                <span class="hljs-keyword">const</span> { body, headers, status } = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(cachedResponse);
                ctx.<span class="hljs-property">body</span> = body;
                ctx.<span class="hljs-property">status</span> = status;
                <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(headers).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">[key, value]</span>) =></span> ctx.<span class="hljs-title function_">set</span>(key, value <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>));
                ctx.<span class="hljs-title function_">set</span>(<span class="hljs-string">'X-Cache'</span>, <span class="hljs-string">'HIT'</span>);
            } <span class="hljs-keyword">else</span> {
                <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();

                <span class="hljs-keyword">if</span> (ctx.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) {
                    <span class="hljs-keyword">const</span> response = {
                        <span class="hljs-attr">body</span>: ctx.<span class="hljs-property">body</span>,
                        <span class="hljs-attr">headers</span>: ctx.<span class="hljs-property">response</span>.<span class="hljs-property">headers</span>,
                        <span class="hljs-attr">status</span>: ctx.<span class="hljs-property">status</span>
                    };
                    <span class="hljs-keyword">await</span> <span class="hljs-title function_">tryRedisOperation</span>(<span class="hljs-function">() =></span>
                        redis.<span class="hljs-title function_">setex</span>(cacheKey, <span class="hljs-variable constant_">CACHE_EXPIRATION</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response))
                    );
                    ctx.<span class="hljs-title function_">set</span>(<span class="hljs-string">'X-Cache'</span>, shouldClearCache ? <span class="hljs-string">'CLEARED+MISS'</span> : <span class="hljs-string">'MISS'</span>);
                } <span class="hljs-keyword">else</span> {
                    ctx.<span class="hljs-title function_">set</span>(<span class="hljs-string">'X-Cache'</span>, <span class="hljs-string">'SKIP'</span>);
                }
            }
        } <span class="hljs-keyword">catch</span> (error) {
            ctx.<span class="hljs-title function_">set</span>(<span class="hljs-string">'X-Cache'</span>, <span class="hljs-string">'ERROR'</span>);
            strapi.<span class="hljs-property">log</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'Cache middleware error:'</span>, error);
            <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();
        }

        ctx.<span class="hljs-title function_">set</span>(<span class="hljs-string">'X-Response-Time'</span>, <span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-built_in">Date</span>.now() - start}</span>ms`</span>);
    };
};
</code></pre>
<h2 id="environment-variables-to-configure-cache">Environment variables to configure cache<span class="ml-2 opacity-0 hover:opacity-100"><a href="#environment-variables-to-configure-cache" class="anchor" aria-hidden="true">#</a></span></h2>
<p>Make sure to run command below, before start the strapi app</p>
<pre><code class="hljs language-shell">export REDIS_CACHE_EXPIRATION=3600
export REDIS_URL=redis://:password@localhost:6379
export CACHE_TIMEOUT=1000
</code></pre>
<h2 id="-cache-invalidation-with-query-parameters">üîÑ Cache Invalidation with Query Parameters<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-cache-invalidation-with-query-parameters" class="anchor" aria-hidden="true">#</a></span></h2>
<p>Add <code>?clear_cache=1</code> to any API endpoint to clear its cache. For example:</p>
<pre><code class="hljs language-shell">GET /api/users?clear_cache=1
</code></pre>
<h2 id="-cache-response-headers">üìù Cache Response Headers<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-cache-response-headers" class="anchor" aria-hidden="true">#</a></span></h2>
<p>To track cache usage, the middleware sets an <code>X-Cache</code> header:</p>
<ul>
<li><code>HIT</code>: Data was served from the cache.</li>
<li><code>MISS</code>: Data was retrieved from the source and cached.</li>
<li><code>CLEARED</code>: Cache was invalidated for the request.</li>
<li><code>CLEARED+MISS</code>: Cache was cleared, and fresh data was stored.</li>
<li><code>ERROR</code>: Redis operation failed.</li>
</ul>
<h2 id="-conclusion">üöÄ Conclusion<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-conclusion" class="anchor" aria-hidden="true">#</a></span></h2>
<p>Adding a Redis-powered cache middleware to Strapi can drastically improve performance, scalability, and user experience. By following this guide, you‚Äôll have a flexible caching solution ready to handle high traffic while keeping your application responsive.</p>
<p>Give your Strapi API a performance boost‚Äîstart caching with Redis today! üöÄ</p>2:["$","div",null,{"className":"min-h-screen bg-white dark:bg-neutral-900","children":[["$","$Ld",null,{}],["$","div",null,{"className":"max-w-[min(65ch,90vw)] mx-auto px-4 py-12","children":[["$","div",null,{"className":"flex items-center justify-between mb-12","children":["$","div",null,{"children":["$","p",null,{"className":"text-neutral-600 dark:text-neutral-400","children":"Thoughts, tutorials, and insights about web development"}]}]}],["$","$Le",null,{"articles":[{"id":"docker-and-cicd","slug":"docker-and-cicd","title":"Explain Docker and CI/CD ‚Äî The DevOps Kitchen Comic","excerpt":"to help understand Docker in a fun way. You can imagine this as a series of comic panels featuring characters and metaphors","content":"$f","image":"/images/articles/docker-dino-kitchen.png","published_at":"2025-05-21T19:41:00+07:00","author":"harry-osmar-sitohang","reading_time":4},{"id":"mac-setup-for-fullstack-dev","slug":"mac-setup-for-fullstack-dev","title":"macbook setup guide for fullstack developer","excerpt":"This guide walks you through setting up key tools such as Git, oh-my-zsh, asdf for managing versions of different programming languages, and more.","content":"$10","image":"/images/articles/mac-setup-for-fullstack-dev.webp","published_at":"2024-12-28T15:00:00+07:00","author":"harry-osmar-sitohang","reading_time":6},{"id":"business-analyst-point-of-view","slug":"business-analyst-point-of-view","title":"The Importance of Business Analysis","excerpt":"Proper analysis isn‚Äôt just about gathering requirements‚Äîit‚Äôs about asking the right questions, guiding stakeholders, and ensuring alignment among everyone involved.","content":"$11","image":"/images/articles/business-analyst-pov.jpeg","published_at":"2024-12-23T20:48:00+07:00","author":"anggraeni-wisono","reading_time":2},{"id":"ai-ollama-structured-output","slug":"ai-ollama-structured-output","title":"Unlocking the Power of AI: Ollama LLM with Structured Output","excerpt":"JSON schema in Ollama ü¶ô, revolutionizes the way we handle data extraction, response structuring, and consistency","content":"$12","image":"/images/articles/ai-ollama-structured-output.webp","published_at":"2024-12-12T22:53:00+07:00","author":"harry-osmar-sitohang","reading_time":6},{"id":"strapi-middleware-cache","slug":"strapi-middleware-cache","title":"Implementing a Redis-Powered Cache Middleware in Strapi","excerpt":"This article dives into creating and configuring a Redis-powered cache middleware for Strapi. You‚Äôll learn how to handle dynamic caching, invalidate caches, and configure Redis seamlessly.","content":"$13","image":"/images/articles/strapi-middleware-cache.webp","published_at":"2024-12-10T12:49:00+07:00","author":"harry-osmar-sitohang","reading_time":4}]}],["$","$L14",null,{"currentPage":1,"totalPages":2,"baseUrl":"/articles"}]]}]]}]
