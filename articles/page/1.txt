3:I[6702,[],""]
5:I[8097,[],""]
6:I[4865,["513","static/chunks/513-54c786173a9c666c.js","122","static/chunks/122-1e2541ae7fd00b15.js","948","static/chunks/app/(content)/layout-98a57fd1c16e634e.js"],"NavTabs"]
7:I[4387,["185","static/chunks/app/layout-dc2409b386032b48.js"],"ThemeProvider"]
4:["page","1","d"]
8:{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"}
9:{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"}
a:{"display":"inline-block"}
b:{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0}
0:["3T7sT7qcEpCiNKMuYV0_X",[[["",{"children":["(content)",{"children":["articles",{"children":["page",{"children":[["page","1","d"],{"children":["__PAGE__?{\"page\":\"1\"}",{}]}]}]}]}]},"$undefined","$undefined",true],["",{"children":["(content)",{"children":["articles",{"children":["page",{"children":[["page","1","d"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(content)","children","articles","children","page","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(content)","children","articles","children","page","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(content)","children","articles","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[null,["$","div",null,{"className":"min-h-screen bg-white dark:bg-neutral-900","children":[["$","$L6",null,{}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(content)","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]]}]],null],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/7b555c975a649a76.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":["$","body",null,{"className":"__variable_1e4310 __variable_c3aa02 min-h-screen font-sans antialiased bg-background text-foreground dark:bg-neutral-900 dark:text-neutral-100 transition-colors","children":["$","$L7",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":"$8","children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":"$9","children":"404"}],["$","div",null,{"style":"$a","children":["$","h2",null,{"style":"$b","children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]}]}]}]],null],null],["$Lc",null]]]]
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Articles | Harry Osmar Sitohang"}],["$","meta","3",{"name":"description","content":"Thoughts, tutorials, and insights about web development, software engineering, and technology."}],["$","meta","4",{"name":"robots","content":"index, follow"}],["$","meta","5",{"property":"og:title","content":"Articles"}],["$","meta","6",{"property":"og:description","content":"Thoughts, tutorials, and insights about web development, software engineering, and technology."}],["$","meta","7",{"property":"og:url","content":"https://www.harryosmarsitohang.com/articles/page/1"}],["$","meta","8",{"property":"og:type","content":"website"}],["$","meta","9",{"name":"twitter:card","content":"summary"}],["$","meta","10",{"name":"twitter:title","content":"Articles"}],["$","meta","11",{"name":"twitter:description","content":"Thoughts, tutorials, and insights about web development, software engineering, and technology."}],["$","link","12",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","13",{"name":"next-size-adjust"}]]
1:null
d:I[6243,["513","static/chunks/513-54c786173a9c666c.js","189","static/chunks/189-76139bfb22cdcfc2.js","829","static/chunks/app/(content)/articles/page/%5Bpage%5D/page-7061fbc43180fdf8.js"],"LastVisitedPageHandler"]
e:I[4315,["513","static/chunks/513-54c786173a9c666c.js","189","static/chunks/189-76139bfb22cdcfc2.js","829","static/chunks/app/(content)/articles/page/%5Bpage%5D/page-7061fbc43180fdf8.js"],"default"]
14:I[6676,["513","static/chunks/513-54c786173a9c666c.js","189","static/chunks/189-76139bfb22cdcfc2.js","829","static/chunks/app/(content)/articles/page/%5Bpage%5D/page-7061fbc43180fdf8.js"],"Pagination"]
f:T74c,<p>In a project, when proper analysis is <del>overlooked</del>, <strong>chaos</strong> often follows:</p>
<ul>
<li>Developers <strong>struggle</strong> <del>without clear requirements.</del></li>
<li>Teams face <strong>delays</strong>, rework, and frustration.</li>
<li>Management becomes dissatisfied <del>when expectations aren’t met</del>.</li>
</ul>
<p>As someone who has worked as a Business Analyst, I truly appreciate the value this role brings to a project. Proper analysis isn’t just about gathering requirements—it’s about <strong>asking the right questions</strong>, guiding stakeholders, and <strong>ensuring alignment</strong> among everyone involved.</p>
<p>In my experience, three key steps make all the difference:</p>
<p>✅ Ask stakeholders <strong>detailed</strong> questions. Taking the time to dig deeper helps uncover the real needs behind their requests. Often, the true requirements only emerge through targeted and specific inquiries.</p>
<p>✅ Guide stakeholders through the process. Stakeholders may overlook critical details or fail to recognize what’s necessary. Helping them <strong>clarify</strong> and refine their needs is one of the most rewarding parts of the role.</p>
<p>✅ Validate and confirm the gathered information. <strong>Reviewing and aligning</strong> the understanding of requirements with both stakeholders and the team prevents costly assumptions and misunderstandings.</p>
<p>These steps, though time-consuming, set the foundation for a successful project. Reflecting on my time as a Business Analyst, I found immense satisfaction in solving complex problems, bridging gaps between teams, and contributing to outcomes everyone could be proud of.</p>
<p>Business Analysis taught me the importance of <strong>clarity and communication</strong>, and these lessons have stayed with me throughout my career.</p>10:T6680,<h2 id="-ollama-introduction">🦙 Ollama introduction<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-ollama-introduction" class="anchor" aria-hidden="true">#</a></span></h2>
<p><a href="https://ollama.com/">Ollama</a> is a powerful platform designed to make it easy for developers <strong>to run large language models (LLMs) directly on their local computers</strong>, without needing a <del>big server</del> or expensive hardware like <del>high-end GPUs</del>.</p>
<p>With <a href="https://ollama.com/">Ollama</a>, you can get up and running with models such as <code>Llama 3.3</code>, <code>Phi 3</code>, <code>Mistral</code>, <code>Gemma 2</code>, and more, all <del>without the need for specialized cloud infrastructure</del>.</p>
<p>In short, <a href="https://ollama.com/">Ollama</a> democratizes access to cutting-edge <code>AI models</code>, making them <strong>accessible on personal computers</strong> and empowering developers to build AI solutions without the burden of <del>expensive server infrastructure</del>.</p>
<h2 id="-why-use-json-schema-constraints-in-ollama">🔑 Why Use JSON Schema Constraints in Ollama?<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-why-use-json-schema-constraints-in-ollama" class="anchor" aria-hidden="true">#</a></span></h2>
<p><a href="https://ollama.com/">Ollama</a> now supports to constrain the output to a json
schema. <a href="https://ollama.com/blog/structured-outputs">https://ollama.com/blog/structured-outputs</a></p>
<p>Use cases for structured outputs include:</p>
<ul>
<li>Parsing data from documents</li>
<li>Extracting data from images</li>
<li>Structuring all language model responses</li>
<li>More reliability and consistency than JSON mode</li>
</ul>
<h2 id="-getting-started">🚀 Getting Started<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-getting-started" class="anchor" aria-hidden="true">#</a></span></h2>
<h3 id="1-install-ollama">1. Install Ollama<span class="ml-2 opacity-0 hover:opacity-100"><a href="#1-install-ollama" class="anchor" aria-hidden="true">#</a></span></h3>
<p>Download <a href="https://ollama.com/">Ollama</a> from <a href="https://ollama.com/download">https://ollama.com/download</a>. Choose the appropriate version for your
platform and complete the installation.</p>
<h3 id="2-verify-installation">2. Verify Installation<span class="ml-2 opacity-0 hover:opacity-100"><a href="#2-verify-installation" class="anchor" aria-hidden="true">#</a></span></h3>
<p>After installation, confirm the version by running:</p>
<pre><code class="hljs language-shell">ollama --version
</code></pre>
<p>expected output format:</p>
<pre><code class="hljs language-shell">ollama version is 0.5.1
</code></pre>
<h3 id="3-start-ollama-server">3. Start Ollama Server<span class="ml-2 opacity-0 hover:opacity-100"><a href="#3-start-ollama-server" class="anchor" aria-hidden="true">#</a></span></h3>
<p>Run the following command to start the server:</p>
<pre><code class="hljs language-shell">ollama serve
</code></pre>
<p>By default, the server runs on port 11434. You can verify this by
visiting <a href="http://localhost:11434">http://localhost:11434</a>.</p>
<h3 id="4-download-the-ollama-model">4. Download the Ollama Model<span class="ml-2 opacity-0 hover:opacity-100"><a href="#4-download-the-ollama-model" class="anchor" aria-hidden="true">#</a></span></h3>
<p>I recommend the <code>llama3.2</code> model for its compact size (<code>2.0 GB</code>) and impressive performance.</p>
<p>It features <code>3 billion</code> parameters and <strong>outperforms</strong> many larger models in industry benchmarks.</p>
<p>Download the model with:</p>
<pre><code class="hljs language-shell">ollama run llama3.2
</code></pre>
<p>Verify the download:</p>
<pre><code class="hljs language-shell">ollama list
</code></pre>
<p>Expected output:</p>
<pre><code class="hljs language-shell">NAME                       ID              SIZE      MODIFIED        
llama3.2:latest            a80c4f17acd5    2.0 GB    n weeks ago
</code></pre>
<h2 id="️-run-using-curl">▶️ Run using CURL<span class="ml-2 opacity-0 hover:opacity-100"><a href="#️-run-using-curl" class="anchor" aria-hidden="true">#</a></span></h2>
<p>Run using curl directly to <a href="https://ollama.com/">Ollama</a> server <a href="http://localhost:11434">http://localhost:11434</a>.</p>
<p>There is no need to code, there is no setup, no need to install anything (*make sure you have curl installed).</p>
<h3 id="use-case-1-extract-country-data">Use Case 1: Extract Country Data<span class="ml-2 opacity-0 hover:opacity-100"><a href="#use-case-1-extract-country-data" class="anchor" aria-hidden="true">#</a></span></h3>
<blockquote>
<p>Input Prompt: "Tell me about Canada."</p>
</blockquote>
<h4 id="schema">Schema</h4>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"object"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"properties"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"string"</span>
    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"capital"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"string"</span>
    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"languages"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"array"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"items"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"string"</span>
      <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"required"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-string">"name"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">"capital"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">"languages"</span>
  <span class="hljs-punctuation">]</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<h4 id="curl-request">Curl Request</h4>
<p>json schema above included in the request in field <code>format</code>.</p>
<p>Run the following command in the terminal:</p>
<pre><code class="hljs language-bash">curl --location <span class="hljs-string">'http://127.0.0.1:11434/api/chat'</span> \
--header <span class="hljs-string">'Content-Type: application/json'</span> \
--data <span class="hljs-string">'{
  "model": "llama3.2",
  "messages": [{"role": "user", "content": "Tell me about Canada."}],
  "stream": false,
  "format": {
    "type": "object",
    "properties": {
      "name": { "type": "string" },
      "capital": { "type": "string" },
      "languages": { "type": "array", "items": { "type": "string" } }
    },
    "required": ["name", "capital", "languages"]
  }
}'</span>
</code></pre>
<h4 id="response">Response</h4>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"model"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"llama3.2"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"created_at"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"2024-12-12T07:47:22.184905Z"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"message"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"role"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"assistant"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"content"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"{ \"capital\": \"Ottawa\", \"languages\": [\"English\", \"French\"], \"name\":\"Canada\" }"</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"done_reason"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"stop"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"done"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"total_duration"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1232600000</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"load_duration"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">33616458</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"prompt_eval_count"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">30</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"prompt_eval_duration"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">495000000</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"eval_count"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">29</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"eval_duration"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">700000000</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>see field <code>message.content</code> using the same json schema as above</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"capital"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Ottawa"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"languages"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-string">"English"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">"French"</span>
  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Canada"</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<h3 id="use-case-2-extract-pets-data">Use Case 2: Extract Pets Data<span class="ml-2 opacity-0 hover:opacity-100"><a href="#use-case-2-extract-pets-data" class="anchor" aria-hidden="true">#</a></span></h3>
<blockquote>
<p>Prompt: "I have two pets. A cat named Luna who is 5 years old and loves playing with yarn. She has grey fur. I also have a 2-year-old black cat named Loki who loves tennis balls."</p>
</blockquote>
<h4 id="schema-1">Schema</h4>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"$defs"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"Pet"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"properties"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">"age"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
          <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"integer"</span>
        <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"animal"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
          <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"string"</span>
        <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"color"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
          <span class="hljs-attr">"anyOf"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
            <span class="hljs-punctuation">{</span>
              <span class="hljs-attr">"const"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"black"</span>
            <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
            <span class="hljs-punctuation">{</span>
              <span class="hljs-attr">"const"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"grey"</span>
            <span class="hljs-punctuation">}</span>
          <span class="hljs-punctuation">]</span>
        <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"favorite_toy"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
          <span class="hljs-attr">"anyOf"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
            <span class="hljs-punctuation">{</span>
              <span class="hljs-attr">"const"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"yarn"</span>
            <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
            <span class="hljs-punctuation">{</span>
              <span class="hljs-attr">"const"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"tennis balls"</span>
            <span class="hljs-punctuation">}</span>
          <span class="hljs-punctuation">]</span>
        <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
          <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"string"</span>
        <span class="hljs-punctuation">}</span>
      <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"required"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
        <span class="hljs-string">"name"</span><span class="hljs-punctuation">,</span>
        <span class="hljs-string">"animal"</span><span class="hljs-punctuation">,</span>
        <span class="hljs-string">"age"</span><span class="hljs-punctuation">,</span>
        <span class="hljs-string">"color"</span><span class="hljs-punctuation">,</span>
        <span class="hljs-string">"favorite_toy"</span>
      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"object"</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"properties"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"pets"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"array"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"items"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">"$ref"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"#/$defs/Pet"</span>
      <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"required"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-string">"pets"</span>
  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"object"</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<h4 id="curl-request-1">Curl Request</h4>
<pre><code class="hljs language-bash">curl --location <span class="hljs-string">'http://127.0.0.1:11434/api/chat'</span> \
--header <span class="hljs-string">'Content-Type: application/json'</span> \
--data <span class="hljs-string">'{
  "model": "llama3.2",
  "messages": [{
    "role": "user",
    "content": "I have two pets. A cat named Luna who is 5 years old and loves playing with yarn. She has grey fur. I also have a 2-year-old black cat named Loki who loves tennis balls."
  }],
  "stream": false,
  "format": {
    "$defs": {
      "Pet": {
        "properties": {
          "age": { "type": "integer" },
          "animal": { "type": "string" },
          "color": { "anyOf": [
            { "const": "black" },
            { "const": "grey" }
          ] },
          "favorite_toy": { "anyOf": [
            { "const": "yarn" },
            { "const": "tennis balls" }
          ] },
          "name": { "type": "string" }
        },
        "required": ["name", "animal", "age", "color", "favorite_toy"],
        "type": "object"
      }
    },
    "properties": {
      "pets": {
        "type": "array",
        "items": { "$ref": "#/$defs/Pet" }
      }
    },
    "required": ["pets"],
    "type": "object"
  }
}'</span>
</code></pre>
<h4 id="response-1">Response</h4>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"model"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"llama3.2"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"created_at"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"2024-12-12T08:32:37.316804Z"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"message"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">"role"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"assistant"</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"content"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"{ \"pets\": [ { \"age\": 5, \"animal\": \"cat\", \"color\": \"grey\", \"favorite_toy\": \"yarn\" , \"name\": \"Luna\"}, { \"age\": 2, \"animal\": \"cat\", \"color\": \"black\", \"favorite_toy\": \"tennis balls\" , \"name\": \"Loki\"}] }"</span>
    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"done_reason"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"stop"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"done"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"total_duration"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">7159731958</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"load_duration"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">829545916</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"prompt_eval_count"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">68</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"prompt_eval_duration"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4620000000</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"eval_count"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">82</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"eval_duration"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1697000000</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>see field <code>message.content</code> using the same json schema as above</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"pets"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"age"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"animal"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"cat"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"color"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"grey"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"favorite_toy"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"yarn"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Luna"</span>
    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
    <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"age"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"animal"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"cat"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"color"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"black"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"favorite_toy"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"tennis balls"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Loki"</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">]</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<h2 id="️-run-using-demo-python-api">▶️ Run using demo python api<span class="ml-2 opacity-0 hover:opacity-100"><a href="#️-run-using-demo-python-api" class="anchor" aria-hidden="true">#</a></span></h2>
<p>Recommend to use python 3.10.* with venv</p>
<h3 id="1-create-venv">1. Create venv<span class="ml-2 opacity-0 hover:opacity-100"><a href="#1-create-venv" class="anchor" aria-hidden="true">#</a></span></h3>
<p>Clone this repository</p>
<pre><code class="hljs language-shell">git clone https://github.com/harryosmar/ollama-demo-python.git
</code></pre>
<p>Run the following command in the terminal:</p>
<pre><code class="hljs language-shell">cd ollama-demo-python

python3 -m venv venv
</code></pre>
<h3 id="2-activate-venv">2. Activate venv<span class="ml-2 opacity-0 hover:opacity-100"><a href="#2-activate-venv" class="anchor" aria-hidden="true">#</a></span></h3>
<p>Run the following command in the terminal:</p>
<pre><code class="hljs language-shell">source ./venv/bin/activate
</code></pre>
<h3 id="3-install-requirements">3. Install requirements<span class="ml-2 opacity-0 hover:opacity-100"><a href="#3-install-requirements" class="anchor" aria-hidden="true">#</a></span></h3>
<p>Run the following command in the terminal:</p>
<pre><code class="hljs language-shell">pip install -r requirements.txt
</code></pre>
<ul>
<li><a href="https://flask.palletsprojects.com/en/2.3.x/">Flask</a> used as api framework</li>
<li><a href="https://pydantic-docs.helpmanual.io/">pydantic</a> used for data validation, create json schema from python class</li>
</ul>
<h3 id="4-run-app">4. Run app<span class="ml-2 opacity-0 hover:opacity-100"><a href="#4-run-app" class="anchor" aria-hidden="true">#</a></span></h3>
<p>Run the following command in the terminal:</p>
<pre><code class="hljs language-shell">flask --app main run
</code></pre>
<p>Start api server in <a href="http://127.0.0.1:5000">http://127.0.0.1:5000</a></p>
<h3 id="5-swagger-endpoints">5. Swagger endpoints<span class="ml-2 opacity-0 hover:opacity-100"><a href="#5-swagger-endpoints" class="anchor" aria-hidden="true">#</a></span></h3>
<p><a href="http://127.0.0.1:5000/apidocs/">swagger access link http://127.0.0.1:5000/apidocs/</a></p>
<h2 id="-conclusion">🔥 Conclusion<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-conclusion" class="anchor" aria-hidden="true">#</a></span></h2>
<p>By leveraging JSON schema constraints, <a href="https://ollama.com/">Ollama</a> ensures structured, reliable, and predictable outputs from LLMs. Whether you’re parsing documents, analyzing images, or building robust APIs, this feature delivers the consistency and accuracy you need.</p>
<h2 id="-credits">🏅 Credits<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-credits" class="anchor" aria-hidden="true">#</a></span></h2>
<p>Give credits to <strong>Matt Williams</strong> with his youtube channel <a href="https://www.youtube.com/@technovangelist">https://www.youtube.com/@technovangelist</a></p>
<p>He was part of the <strong>founding</strong> <a href="https://ollama.com/">Ollama</a> team. Don't forget to check out &#x26; subscribe to his channel, help him to reach 1 million subscribers.</p>
<p>I learned a lot from his videos, thank you Matt, hats off to you! 👏</p>11:T3f73,<p>Caching is an essential optimization technique in web development, helping <strong>reduce database load</strong> and significantly <strong>speeding up response times</strong>. If you’re building a Strapi-based application, adding a caching layer can make your API lightning-fast while maintaining scalability.</p>
<h2 id="requirements">Requirements<span class="ml-2 opacity-0 hover:opacity-100"><a href="#requirements" class="anchor" aria-hidden="true">#</a></span></h2>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"dependencies"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"@strapi/strapi"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"5.1.0"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"ioredis"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"^5.4.1"</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>

</code></pre>
<h2 id="-why-add-caching-in-strapi">🚀 Why Add Caching in Strapi?<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-why-add-caching-in-strapi" class="anchor" aria-hidden="true">#</a></span></h2>
<p>Strapi provides a robust backend for APIs, but database queries can become a bottleneck as traffic grows. By adding caching to Strapi:</p>
<ul>
<li>Boost API <strong>response time</strong>: Serve cached data directly, avoiding repetitive database queries.</li>
<li><strong>Reduce</strong> backend load: Offload frequent reads to an in-memory store like Redis.</li>
<li>Enhance <strong>scalability</strong>: Handle higher traffic without straining your database.</li>
</ul>
<h2 id="flow">Flow<span class="ml-2 opacity-0 hover:opacity-100"><a href="#flow" class="anchor" aria-hidden="true">#</a></span></h2>
<h3 id="normal-flow">Normal flow<span class="ml-2 opacity-0 hover:opacity-100"><a href="#normal-flow" class="anchor" aria-hidden="true">#</a></span></h3>
<img src="/images/mermaid/mermaid-b87006366ef0ef03ba349357c7f73b87.svg" alt="Mermaid diagram">
<h3 id="clear_cache-flow">clear_cache Flow<span class="ml-2 opacity-0 hover:opacity-100"><a href="#clear_cache-flow" class="anchor" aria-hidden="true">#</a></span></h3>
<img src="/images/mermaid/mermaid-e3b912d91bb683f397b46239682fa223.svg" alt="Mermaid diagram">
<h2 id="-installing-redis-for-caching">📦 Installing Redis for Caching<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-installing-redis-for-caching" class="anchor" aria-hidden="true">#</a></span></h2>
<p>Install <code>ioredis</code> to interact with Redis, because we're using redis as cache provider.</p>
<pre><code class="hljs language-shell">npm install ioredis
</code></pre>
<h2 id="️-setting-up-middleware-in-strapi">🛠️ Setting Up Middleware in Strapi<span class="ml-2 opacity-0 hover:opacity-100"><a href="#️-setting-up-middleware-in-strapi" class="anchor" aria-hidden="true">#</a></span></h2>
<p>To add a custom middleware, Strapi requires you to:</p>
<ol>
<li>Register it in the middleware configuration file (<code>./config/middlewares.ts</code>).</li>
<li>Create the middleware file in directory <code>./src/middlewares/</code>, then implement the middleware logic.</li>
</ol>
<h3 id="1-middleware-registration">1. Middleware Registration<span class="ml-2 opacity-0 hover:opacity-100"><a href="#1-middleware-registration" class="anchor" aria-hidden="true">#</a></span></h3>
<p>In <code>./config/middlewares.ts</code>, register your middleware as a global middleware:</p>
<p>register new <code>global::cache-middleware</code></p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [
  <span class="hljs-string">'strapi::logger'</span>,
  <span class="hljs-string">'strapi::errors'</span>,
  <span class="hljs-string">'strapi::security'</span>,
  <span class="hljs-string">'strapi::cors'</span>,
  <span class="hljs-string">'strapi::poweredBy'</span>,
  <span class="hljs-string">'strapi::query'</span>,
  <span class="hljs-string">'strapi::body'</span>,
  <span class="hljs-string">'strapi::session'</span>,
  <span class="hljs-string">'strapi::favicon'</span>,
  <span class="hljs-string">'strapi::public'</span>,
  <span class="hljs-string">'global::cache-middleware'</span> <span class="hljs-comment">// Register cache middleware here</span>
];
</code></pre>
<h3 id="2--create-the-cache-middleware-file">2. 🧩 Create the Cache Middleware file<span class="ml-2 opacity-0 hover:opacity-100"><a href="#2--create-the-cache-middleware-file" class="anchor" aria-hidden="true">#</a></span></h3>
<p>Create a new middleware file, <code>cache-middleware.ts</code>, in the <code>./src/middlewares/</code> directory</p>
<p>Full Implementation</p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Redis</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'ioredis'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> (config, { strapi }) => {
    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CACHE_TIMEOUT</span> = <span class="hljs-number">1000</span>; <span class="hljs-comment">// Connection timeout</span>
    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CACHE_EXPIRATION</span> = process.<span class="hljs-property">env</span>.<span class="hljs-property">REDIS_CACHE_EXPIRATION</span> || <span class="hljs-number">3600</span>; <span class="hljs-comment">// Default TTL: 1 hour</span>

    <span class="hljs-keyword">const</span> redis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Redis</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">REDIS_URL</span> || <span class="hljs-string">'redis://localhost:6379'</span>, {
        <span class="hljs-attr">connectTimeout</span>: <span class="hljs-variable constant_">CACHE_TIMEOUT</span>,
        <span class="hljs-attr">commandTimeout</span>: <span class="hljs-variable constant_">CACHE_TIMEOUT</span>,
        <span class="hljs-attr">retryStrategy</span>: <span class="hljs-function">(<span class="hljs-params">times</span>) =></span> (times &#x3C;= <span class="hljs-number">1</span> ? <span class="hljs-variable constant_">CACHE_TIMEOUT</span> : <span class="hljs-literal">null</span>)
    });

    redis.<span class="hljs-title function_">on</span>(<span class="hljs-string">'error'</span>, <span class="hljs-function">(<span class="hljs-params">error</span>) =></span> {
        strapi.<span class="hljs-property">log</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'Redis connection error:'</span>, error);
    });

    <span class="hljs-keyword">return</span> <span class="hljs-title function_">async</span> (ctx, next) => {
        <span class="hljs-keyword">const</span> start = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();
        <span class="hljs-keyword">const</span> matches = ctx.<span class="hljs-property">path</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/^\/?api(\/.+)$/</span>);

        <span class="hljs-comment">// Skip non-GET requests or non-API paths</span>
        <span class="hljs-keyword">if</span> (ctx.<span class="hljs-property">method</span> !== <span class="hljs-string">'GET'</span> || !matches || matches.<span class="hljs-property">length</span> !== <span class="hljs-number">2</span>) {
            <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();
            <span class="hljs-keyword">return</span>;
        }

        <span class="hljs-keyword">const</span> queryParams = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>(ctx.<span class="hljs-property">querystring</span>);
        <span class="hljs-keyword">const</span> shouldClearCache = queryParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">'clear_cache'</span>) === <span class="hljs-string">'1'</span>;
        queryParams.<span class="hljs-title function_">delete</span>(<span class="hljs-string">'clear_cache'</span>); <span class="hljs-comment">// Remove clear_cache from cache key</span>
        <span class="hljs-keyword">const</span> cacheKey = <span class="hljs-string">`strapi:cache:<span class="hljs-subst">${ctx.path}</span>?<span class="hljs-subst">${<span class="hljs-built_in">decodeURIComponent</span>(queryParams.toString())}</span>`</span>;

        <span class="hljs-keyword">const</span> <span class="hljs-title function_">tryRedisOperation</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">operation, retryCount = <span class="hljs-number">1</span></span>) => {
            <span class="hljs-keyword">try</span> {
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-title function_">operation</span>();
            } <span class="hljs-keyword">catch</span> (error) {
                <span class="hljs-keyword">if</span> (retryCount > <span class="hljs-number">0</span>) {
                    strapi.<span class="hljs-property">log</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">'Redis operation failed, retrying...'</span>);
                    <span class="hljs-keyword">return</span> <span class="hljs-title function_">tryRedisOperation</span>(operation, retryCount - <span class="hljs-number">1</span>);
                }
                <span class="hljs-keyword">throw</span> error;
            }
        };

        <span class="hljs-keyword">try</span> {
            <span class="hljs-keyword">if</span> (shouldClearCache) {
                <span class="hljs-keyword">await</span> <span class="hljs-title function_">tryRedisOperation</span>(<span class="hljs-function">() =></span> redis.<span class="hljs-title function_">del</span>(cacheKey));
                strapi.<span class="hljs-property">log</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">`Cache cleared for: <span class="hljs-subst">${cacheKey}</span>`</span>);
                ctx.<span class="hljs-title function_">set</span>(<span class="hljs-string">'X-Cache'</span>, <span class="hljs-string">'CLEARED'</span>);
            }

            <span class="hljs-keyword">const</span> cachedResponse = <span class="hljs-keyword">await</span> <span class="hljs-title function_">tryRedisOperation</span>(<span class="hljs-function">() =></span> redis.<span class="hljs-title function_">get</span>(cacheKey));
            <span class="hljs-keyword">if</span> (cachedResponse &#x26;&#x26; !shouldClearCache) {
                <span class="hljs-keyword">const</span> { body, headers, status } = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(cachedResponse);
                ctx.<span class="hljs-property">body</span> = body;
                ctx.<span class="hljs-property">status</span> = status;
                <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(headers).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">[key, value]</span>) =></span> ctx.<span class="hljs-title function_">set</span>(key, value <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>));
                ctx.<span class="hljs-title function_">set</span>(<span class="hljs-string">'X-Cache'</span>, <span class="hljs-string">'HIT'</span>);
            } <span class="hljs-keyword">else</span> {
                <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();

                <span class="hljs-keyword">if</span> (ctx.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) {
                    <span class="hljs-keyword">const</span> response = {
                        <span class="hljs-attr">body</span>: ctx.<span class="hljs-property">body</span>,
                        <span class="hljs-attr">headers</span>: ctx.<span class="hljs-property">response</span>.<span class="hljs-property">headers</span>,
                        <span class="hljs-attr">status</span>: ctx.<span class="hljs-property">status</span>
                    };
                    <span class="hljs-keyword">await</span> <span class="hljs-title function_">tryRedisOperation</span>(<span class="hljs-function">() =></span>
                        redis.<span class="hljs-title function_">setex</span>(cacheKey, <span class="hljs-variable constant_">CACHE_EXPIRATION</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response))
                    );
                    ctx.<span class="hljs-title function_">set</span>(<span class="hljs-string">'X-Cache'</span>, shouldClearCache ? <span class="hljs-string">'CLEARED+MISS'</span> : <span class="hljs-string">'MISS'</span>);
                } <span class="hljs-keyword">else</span> {
                    ctx.<span class="hljs-title function_">set</span>(<span class="hljs-string">'X-Cache'</span>, <span class="hljs-string">'SKIP'</span>);
                }
            }
        } <span class="hljs-keyword">catch</span> (error) {
            ctx.<span class="hljs-title function_">set</span>(<span class="hljs-string">'X-Cache'</span>, <span class="hljs-string">'ERROR'</span>);
            strapi.<span class="hljs-property">log</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'Cache middleware error:'</span>, error);
            <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();
        }

        ctx.<span class="hljs-title function_">set</span>(<span class="hljs-string">'X-Response-Time'</span>, <span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-built_in">Date</span>.now() - start}</span>ms`</span>);
    };
};
</code></pre>
<h2 id="environment-variables-to-configure-cache">Environment variables to configure cache<span class="ml-2 opacity-0 hover:opacity-100"><a href="#environment-variables-to-configure-cache" class="anchor" aria-hidden="true">#</a></span></h2>
<p>Make sure to run command below, before start the strapi app</p>
<pre><code class="hljs language-shell">export REDIS_CACHE_EXPIRATION=3600
export REDIS_URL=redis://:password@localhost:6379
export CACHE_TIMEOUT=1000
</code></pre>
<h2 id="-cache-invalidation-with-query-parameters">🔄 Cache Invalidation with Query Parameters<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-cache-invalidation-with-query-parameters" class="anchor" aria-hidden="true">#</a></span></h2>
<p>Add <code>?clear_cache=1</code> to any API endpoint to clear its cache. For example:</p>
<pre><code class="hljs language-shell">GET /api/users?clear_cache=1
</code></pre>
<h2 id="-cache-response-headers">📝 Cache Response Headers<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-cache-response-headers" class="anchor" aria-hidden="true">#</a></span></h2>
<p>To track cache usage, the middleware sets an <code>X-Cache</code> header:</p>
<ul>
<li><code>HIT</code>: Data was served from the cache.</li>
<li><code>MISS</code>: Data was retrieved from the source and cached.</li>
<li><code>CLEARED</code>: Cache was invalidated for the request.</li>
<li><code>CLEARED+MISS</code>: Cache was cleared, and fresh data was stored.</li>
<li><code>ERROR</code>: Redis operation failed.</li>
</ul>
<h2 id="-conclusion">🚀 Conclusion<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-conclusion" class="anchor" aria-hidden="true">#</a></span></h2>
<p>Adding a Redis-powered cache middleware to Strapi can drastically improve performance, scalability, and user experience. By following this guide, you’ll have a flexible caching solution ready to handle high traffic while keeping your application responsive.</p>
<p>Give your Strapi API a performance boost—start caching with Redis today! 🚀</p>12:T153e,<p>FFMPEG WASM is a powerful library that brings the capabilities of FFMPEG, the industry-standard multimedia tool, directly to the browser. By leveraging WebAssembly, it enables client-side video and audio processing, including recording, transcoding, and even streaming—all without relying on server-side infrastructure.</p>
<p>Explore the demo: <a href="https://github.com/harryosmar/react-ffmpeg-wasm">FFMPEG WASM Demo Project</a>.</p>
<img src="/images/mermaid/mermaid-41ceb72b91dfdd270008de8b93556b78.svg" alt="Mermaid diagram">
<h2 id="-why-use-ffmpeg-wasm">🚀 Why Use FFMPEG WASM?<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-why-use-ffmpeg-wasm" class="anchor" aria-hidden="true">#</a></span></h2>
<ul>
<li>
<p><strong>Offloads Server Load</strong>: Shift intensive video encoding tasks to the client-side, reducing server costs and improving scalability.</p>
</li>
<li>
<p>Full Browser Compatibility: Enables real-time video and audio <strong>processing directly in user agents</strong> (browsers).</p>
</li>
<li>
<p>SharedArrayBuffer for Multi-Threading: Leverages efficient memory management and <strong>multi-threading</strong> to handle large media files seamlessly.</p>
</li>
<li>
<p>Versatile Media Formats: Transcode and <strong>convert</strong> between various video and audio formats directly in the browser.</p>
</li>
</ul>
<h2 id="-advantages">🟢 Advantages<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-advantages" class="anchor" aria-hidden="true">#</a></span></h2>
<ul>
<li>Scalable Architecture: Encode, convert, and process media <strong>on the client side</strong>, freeing server resources.</li>
<li>Efficient Multi-Threading: Uses SharedArrayBuffer to minimize memory usage and boost <strong>performance</strong>.</li>
<li>Cross-Platform: Works across modern browsers with <strong>WebAssembly</strong> support.</li>
<li>No Installation Needed: <strong>Lightweight</strong> and runs entirely in the browser.</li>
</ul>
<p>.</p>
<h2 id="-limitations">🔴 Limitations<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-limitations" class="anchor" aria-hidden="true">#</a></span></h2>
<ul>
<li>Large File Size: The ffmpeg-core.wasm file (~32 MB) <strong>must be downloaded</strong> by the client, which could affect load times.</li>
<li>No RTMP Streaming: While <strong>transcoding</strong> is supported, <del>live streaming</del> to RTMP endpoints is not included.</li>
<li>Complex Headers Setup: Requires CORS and security headers (COEP, COOP, CORP) for enabling features like <strong>SharedArrayBuffer</strong>.</li>
</ul>
<h2 id="-how-to-use-ffmpeg-wasm">🔧 How to Use FFMPEG WASM?<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-how-to-use-ffmpeg-wasm" class="anchor" aria-hidden="true">#</a></span></h2>
<h3 id="1-install-static-handler-for-headers">1. Install Static Handler for Headers<span class="ml-2 opacity-0 hover:opacity-100"><a href="#1-install-static-handler-for-headers" class="anchor" aria-hidden="true">#</a></span></h3>
<p>To use <code>SharedArrayBuffer</code> in the browser, add these headers to your server:</p>
<pre><code class="hljs language-js">{
    <span class="hljs-string">"Cross-Origin-Embedder-Policy"</span>: <span class="hljs-string">"require-corp"</span>,
    <span class="hljs-string">"Cross-Origin-Opener-Policy"</span>: <span class="hljs-string">"same-origin"</span>
}
</code></pre>
<p>Serve your static files with:</p>
<pre><code class="hljs language-shell">npx static-handler --cors --coop --coep --corp -p 8080 ./
</code></pre>
<h3 id="2efficient-media-processing">2.Efficient Media Processing<span class="ml-2 opacity-0 hover:opacity-100"><a href="#2efficient-media-processing" class="anchor" aria-hidden="true">#</a></span></h3>
<p>Transcode videos or process audio files directly in the browser, reducing server dependency.</p>
<h2 id="-real-benefits-of-using-ffmpeg-wasm">🌟 Real Benefits of Using FFMPEG WASM<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-real-benefits-of-using-ffmpeg-wasm" class="anchor" aria-hidden="true">#</a></span></h2>
<ul>
<li>On-the-Fly Media Conversion: Easily convert user-uploaded videos to compatible formats <strong>directly in the browser</strong>.</li>
<li>Improved User Experience: Enable users to edit, trim, and enhance videos <strong>without uploading files to a server</strong>.</li>
<li>Cost-Effective: <del>No need for expensive</del> server-side transcoding infrastructure.</li>
</ul>
<h2 id="️-demo-in-action">🖥️ Demo in Action<span class="ml-2 opacity-0 hover:opacity-100"><a href="#️-demo-in-action" class="anchor" aria-hidden="true">#</a></span></h2>
<p>Check out this real-world example <a href="https://github.com/harryosmar/react-ffmpeg-wasm">FFMPEG WASM Demo Project</a>.</p>
<h2 id="-learn-more">🧠 Learn More<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-learn-more" class="anchor" aria-hidden="true">#</a></span></h2>
<p>For a deep dive into how SharedArrayBuffer optimizes memory usage and enables multi-threading, read:</p>
<ul>
<li><a href="https://webreflection.medium.com/about-sharedarraybuffer-atomics-87f97ddfc098">About SharedArrayBuffer &#x26; Atomics</a>.</li>
<li><a href="https://ffmpegwasm.netlify.app/">FFMPEG WASM Official Website</a>.</li>
</ul>
<p>By embracing FFMPEG WASM, you bring cutting-edge <strong>video and audio processing</strong> to your browser-based applications—efficiently and cost-effectively.</p>13:Tc6d,<p>Streaming technologies are evolving to accommodate real-time content delivery with minimal latency. A particularly innovative approach involves <strong>combining WebSockets with FFMPEG</strong> to enable client-side streams to be processed and <strong>forwarded to RTMP channels</strong>. This article will explore the concept, its setup, and the pros and cons of this technique.</p>
<p>Explore the Code:</p>
<p>GitHub Repository: <a href="https://github.com/chuabingquan/pxy">chuabingquan/pxy 🎥 Proxy livestreams from WebSockets to RTMP</a>.</p>
<h2 id="-how-it-works">🚀 How It Works<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-how-it-works" class="anchor" aria-hidden="true">#</a></span></h2>
<img src="/images/mermaid/mermaid-8a4bc82f5f343e48a382f53df95e641c.svg" alt="Mermaid diagram">
<h3 id="1-browser-connects-to-websocket-server">1. Browser Connects to WebSocket Server:<span class="ml-2 opacity-0 hover:opacity-100"><a href="#1-browser-connects-to-websocket-server" class="anchor" aria-hidden="true">#</a></span></h3>
<p>The browser streams video data through the WebSocket protocol to the server.</p>
<p><img src="/images/articles/3/in-progress-streaming.png" alt="start streaming to websocket using browser"></p>
<h3 id="2-websocket-server-receives-and-processes-data">2. WebSocket Server Receives and Processes Data:<span class="ml-2 opacity-0 hover:opacity-100"><a href="#2-websocket-server-receives-and-processes-data" class="anchor" aria-hidden="true">#</a></span></h3>
<p>The server receives the WebSocket message, processes the data, and forwards it as an FFmpeg command to the RTMP channel.</p>
<p>The ffmpeg command.
FFmpeg receives the WebSocket input and streams it to an RTMP endpoint for live broadcasting.</p>
<pre><code class="hljs language-shell">
ffmpeg -i - -vcodec copy -f flv -loglevel debug rtmp://localhost:1936/live/demo4
</code></pre>
<p><img src="/images/articles/3/websocket-server-to-rtmp.png" alt="websocket server forward stream messsage to RTMP channel"></p>
<h2 id="-benefits">📺 Benefits<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-benefits" class="anchor" aria-hidden="true">#</a></span></h2>
<ul>
<li>🟢 Ease of Use: Quickly establish a live streaming pipeline with WebSocket and FFmpeg.</li>
<li>🟢 Minimal Server Overhead: The server acts as a simple proxy, offloading encoding and streaming tasks to FFmpeg.</li>
</ul>
<h2 id="-limitations">🔴 Limitations<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-limitations" class="anchor" aria-hidden="true">#</a></span></h2>
<ul>
<li>WebSocket Overhead: WebSockets can introduce latency when compared to direct RTMP input.</li>
<li>Dependency on FFmpeg: Requires a working FFmpeg installation on the server.</li>
</ul>
<h2 id="-final-thoughts">🌟 Final Thoughts<span class="ml-2 opacity-0 hover:opacity-100"><a href="#-final-thoughts" class="anchor" aria-hidden="true">#</a></span></h2>
<p>Integrating <strong>WebSockets and FFmpeg for live streaming</strong> is an effective way to bridge browser-based video sources and RTMP endpoints.</p>
<p>Start streaming today and unlock new possibilities for browser-based live broadcasting!</p>2:["$","div",null,{"className":"min-h-screen bg-white dark:bg-neutral-900","children":[["$","$Ld",null,{}],["$","div",null,{"className":"max-w-[min(65ch,90vw)] mx-auto px-4 py-12","children":[["$","div",null,{"className":"flex items-center justify-between mb-12","children":["$","div",null,{"children":["$","p",null,{"className":"text-neutral-600 dark:text-neutral-400","children":"Thoughts, tutorials, and insights about web development"}]}]}],["$","$Le",null,{"articles":[{"id":"business-analyst-point-of-view","slug":"business-analyst-point-of-view","title":"The Importance of Business Analysis","excerpt":"Proper analysis isn’t just about gathering requirements—it’s about asking the right questions, guiding stakeholders, and ensuring alignment among everyone involved.","content":"$f","image":"/images/articles/business-analyst-pov.jpeg","published_at":"2024-12-23T20:48:00+07:00","author":"anggraeni-wisono","reading_time":2},{"id":"ai-ollama-structured-output","slug":"ai-ollama-structured-output","title":"Unlocking the Power of AI: Ollama LLM with Structured Output","excerpt":"JSON schema in Ollama 🦙, revolutionizes the way we handle data extraction, response structuring, and consistency","content":"$10","image":"/images/articles/ai-ollama-structured-output.webp","published_at":"2024-12-12T22:53:00+07:00","author":"harry-osmar-sitohang","reading_time":6},{"id":"strapi-middleware-cache","slug":"strapi-middleware-cache","title":"Implementing a Redis-Powered Cache Middleware in Strapi","excerpt":"This article dives into creating and configuring a Redis-powered cache middleware for Strapi. You’ll learn how to handle dynamic caching, invalidate caches, and configure Redis seamlessly.","content":"$11","image":"/images/articles/strapi-middleware-cache.webp","published_at":"2024-12-10T12:49:00+07:00","author":"harry-osmar-sitohang","reading_time":4},{"id":"ffmpeg-wasm","slug":"ffmpeg-wasm","title":"Mastering FFMPEG WASM","excerpt":"Revolutionizing Video and Audio Processing in the Browser","content":"$12","image":"/images/articles/ffmpeg-wasm2.png","published_at":"2024-10-20T00:00:00+07:00","author":"harry-osmar-sitohang","reading_time":3},{"id":"websocket-to-ffmpeg-streaming","slug":"websocket-to-ffmpeg-streaming","title":"WebSocket to FFMPEG Streaming","excerpt":"Seamlessly Forwarding Live Streams to RTMP Channels.","content":"$13","image":"/images/articles/websocket-to-ffmpeg-streaming.png","published_at":"2024-10-02T00:00:00+07:00","author":"harry-osmar-sitohang","reading_time":2}]}],["$","$L14",null,{"currentPage":1,"totalPages":2,"baseUrl":"/articles"}]]}]]}]
